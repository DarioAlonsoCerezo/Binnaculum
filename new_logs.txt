> am start -a "android.intent.action.MAIN" -c "android.intent.category.LAUNCHER" -n "com.companyname.core.platform.mauitester/crc6493a3e3c6fc642dc8.MainActivity"
> Starting: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.companyname.core.platform.mauitester/crc6493a3e3c6fc642dc8.MainActivity }

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Private.CoreLib.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Core.Platform.MauiTester.dll

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Mono.Android.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Java.Interop.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.InteropServices.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Collections.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Mono.Android.Runtime.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Threading.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Threading.Thread.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Diagnostics.StackTrace.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Memory.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Reflection.Emit.Lightweight.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Reflection.Emit.ILGeneration.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Reflection.Primitives.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.Essentials.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Core.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.ComponentModel.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.VisualStudio.DesignTools.MobileTapContracts.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/netstandard.dll [External]

Thread started: <Thread Pool> #2

Thread started: .NET TP Gate #3

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.DependencyInjection.Abstractions.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.VisualStudio.DesignTools.TapContract.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Console.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.Controls.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.ObjectModel.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.Controls.Xaml.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Configuration.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Configuration.Abstractions.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Logging.Abstractions.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Logging.Debug.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Private.Uri.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Xml.ReaderWriter.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Private.Xml.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.Loader.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.Graphics.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Linq.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.AppCompat.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.ComponentModel.TypeConverter.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.Google.Android.Material.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Fragment.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Activity.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Lifecycle.ViewModel.Android.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Lifecycle.Common.Jvm.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.SavedState.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.DrawerLayout.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.CustomView.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Navigation.Runtime.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Net.Primitives.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Diagnostics.TraceSource.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Logging.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Options.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.Intrinsics.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Collections.Concurrent.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Net.Sockets.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Security.Cryptography.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Net.Security.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.DependencyInjection.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Diagnostics.Tracing.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Win32.Primitives.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Threading.ThreadPool.dll [External]

Thread started: .NET Sockets #4

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Text.RegularExpressions.dll [External]

Thread started:  #5

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Collections.NonGeneric.dll [External]

Thread started: .NET Timer #6

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Diagnostics.DiagnosticSource.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Text.Encoding.Extensions.dll [External]

Thread started: <Thread Pool> #7

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Numerics.Vectors.dll [External]

[form.mauitester] Late-enabling -Xcheck:jni

[form.mauitester] Using CollectorTypeCC GC.

[form.mauitester] Unexpected CPU variant for x86: x86_64.

[form.mauitester] Known variants: atom, sandybridge, silvermont, goldmont, goldmont-plus, tremont, kabylake, default

[CompatibilityChangeReporter] Compat change id reported: 171979766; UID 10202; state: ENABLED

[CompatibilityChangeReporter] Compat change id reported: 242716250; UID 10202; state: ENABLED

[ApplicationLoaders] Returning zygote-cached class loader: /system_ext/framework/androidx.window.extensions.jar

[ApplicationLoaders] Returning zygote-cached class loader: /system_ext/framework/androidx.window.sidecar.jar

[ziparchive] Unable to open '/data/app/~~dFfvnZ0ZXpOb5b3iAcyAdA==/com.companyname.core.platform.mauitester-GayrDerRhEaUs6754uyLFw==/base.dm': No such file or directory

[ziparchive] Unable to open '/data/app/~~dFfvnZ0ZXpOb5b3iAcyAdA==/com.companyname.core.platform.mauitester-GayrDerRhEaUs6754uyLFw==/base.dm': No such file or directory

[nativeloader] Configuring clns-6 for other apk /data/app/~~dFfvnZ0ZXpOb5b3iAcyAdA==/com.companyname.core.platform.mauitester-GayrDerRhEaUs6754uyLFw==/base.apk. target_sdk_version=35, uses_libraries=, library_path=/data/app/~~dFfvnZ0ZXpOb5b3iAcyAdA==/com.companyname.core.platform.mauitester-GayrDerRhEaUs6754uyLFw==/lib/x86_64:/data/app/~~dFfvnZ0ZXpOb5b3iAcyAdA==/com.companyname.core.platform.mauitester-GayrDerRhEaUs6754uyLFw==/base.apk!/lib/x86_64, permitted_path=/data:/mnt/expand:/data/user/0/com.companyname.core.platform.mauitester

[GraphicsEnvironment] Currently set values for:

[GraphicsEnvironment]   angle_gl_driver_selection_pkgs=[]

[GraphicsEnvironment]   angle_gl_driver_selection_values=[]

[GraphicsEnvironment] ANGLE GameManagerService for com.companyname.core.platform.mauitester: false

[GraphicsEnvironment] com.companyname.core.platform.mauitester is not listed in per-application setting

[GraphicsEnvironment] Neither updatable production driver nor prerelease driver is supported.

[DOTNET] AndroidCryptoNative_InitLibraryOnLoad: jint AndroidCryptoNative_InitLibraryOnLoad(JavaVM *, void *) in /__w/1/s/src/native/libs/System.Security.Cryptography.Native.Android/pal_jni.c

[DOTNET] GetOptionalClassGRef: optional class com/android/org/conscrypt/OpenSSLEngineImpl was not found

[monodroid] Failed to create directory '/data/user/0/com.companyname.core.platform.mauitester/files/.__override__/x86_64'. File exists

[monodroid] Creating public update directory: `/data/user/0/com.companyname.core.platform.mauitester/files/.__override__/x86_64`

[form.mauitester] Attempt to remove non-JNI local reference

[monodroid-debug] Trying to initialize the debugger with options: --debugger-agent=transport=dt_socket,loglevel=0,address=10.0.2.2:64564,embedding=1,timeout=30000

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Core.Platform.MauiTester.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Mono.Android.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Java.Interop.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.InteropServices.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Collections.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Mono.Android.Runtime.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Threading.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Threading.Thread.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Diagnostics.StackTrace.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[form.mauitester] Attempt to remove non-JNI local reference

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Memory.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Reflection.Emit.Lightweight.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Reflection.Emit.ILGeneration.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Reflection.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.Essentials.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Core.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.ComponentModel.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.VisualStudio.DesignTools.MobileTapContracts.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly netstandard.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.DependencyInjection.Abstractions.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.VisualStudio.DesignTools.TapContract.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Console.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.Controls.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.ObjectModel.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.Controls.Xaml.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Configuration.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Configuration.Abstractions.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Logging.Abstractions.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Logging.Debug.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Private.Uri.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Xml.ReaderWriter.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Private.Xml.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.Loader.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.Graphics.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Linq.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.AppCompat.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.ComponentModel.TypeConverter.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.Google.Android.Material.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Fragment.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Activity.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Lifecycle.ViewModel.Android.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Lifecycle.Common.Jvm.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.SavedState.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.DrawerLayout.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.CustomView.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Navigation.Runtime.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Net.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Diagnostics.TraceSource.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Logging.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Options.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.Intrinsics.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Collections.Concurrent.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Net.Sockets.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Security.Cryptography.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Net.Security.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.DependencyInjection.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Diagnostics.Tracing.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Win32.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Threading.ThreadPool.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Text.RegularExpressions.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Collections.NonGeneric.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Diagnostics.DiagnosticSource.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Text.Encoding.Extensions.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Numerics.Vectors.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[form.mauitester] Explicit concurrent copying GC freed 41674(2948KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 2457KB/4914KB, paused 314us,35us total 5.354ms

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.RecyclerView.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.SwipeRefreshLayout.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.CardView.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.RecyclerView.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.SwipeRefreshLayout.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.CardView.dll [External]

Thread started: <Thread Pool> #8

Thread started:  #9

Thread started:  #10

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.Serialization.Json.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Private.DataContractSerialization.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.Serialization.Json.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.Serialization.Xml.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Private.DataContractSerialization.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.Serialization.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.Serialization.Xml.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.Serialization.Primitives.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Xml.XmlSerializer.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[libEGL] loaded /vendor/lib64/egl/libEGL_emulation.so

[libEGL] loaded /vendor/lib64/egl/libGLESv1_CM_emulation.so

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Xml.XmlSerializer.dll [External]

[libEGL] loaded /vendor/lib64/egl/libGLESv2_emulation.so

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Loader.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Loader.dll [External]

[AppCompatDelegate] Checking for metadata for AppLocalesMetadataHolderService : Service not found

[monodroid-assembly] open_from_bundles: failed to load bundled assembly _Microsoft.Android.Resource.Designer.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/_Microsoft.Android.Resource.Designer.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.Controls.HotReload.Forms.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.Controls.HotReload.Forms.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.VisualStudio.DesignTools.XamlTapContract.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.VisualStudio.DesignTools.XamlTapContract.dll [External]

[form.mauitester] Explicit concurrent copying GC freed 10330(616KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 2664KB/5329KB, paused 250us,35us total 3.677ms

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Lifecycle.LiveData.Core.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Lifecycle.LiveData.Core.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.CoordinatorLayout.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.CoordinatorLayout.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Primitives.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Lifecycle.Runtime.Android.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.Kotlin.StdLib.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.KotlinX.Coroutines.Core.Jvm.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Lifecycle.Runtime.Android.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.Kotlin.StdLib.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.KotlinX.Coroutines.Core.Jvm.dll [External]

[form.mauitester] Accessing hidden method Landroid/view/ViewGroup;->makeOptionalFitsSystemWindows()V (unsupported, reflection, allowed)

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.ViewPager2.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.ViewPager2.dll [External]

[CompatibilityChangeReporter] Compat change id reported: 171228096; UID 10202; state: ENABLED

[TabLayout] MODE_SCROLLABLE + GRAVITY_FILL is not supported, GRAVITY_START will be used instead

[CompatibilityChangeReporter] Compat change id reported: 210923482; UID 10202; state: ENABLED

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.ViewPager.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.ViewPager.dll [External]

[form.mauitester] Explicit concurrent copying GC freed 4602(792KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 3424KB/6848KB, paused 305us,33us total 4.251ms

[CompatibilityChangeReporter] Compat change id reported: 237531167; UID 10202; state: DISABLED

[OpenGLRenderer] Unknown dataspace 0

[Choreographer] Skipped 151 frames!  The application may be doing too much work on its main thread.

[OpenGLRenderer] Failed to choose config with EGL_SWAP_BEHAVIOR_PRESERVED, retrying without...

[OpenGLRenderer] Failed to initialize 101010-2 format, error = EGL_SUCCESS

[Gralloc4] mapper 4.x is not supported

[OpenGLRenderer] Unable to match the desired swap behavior.

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[OpenGLRenderer] Davey! duration=2917ms; Flags=1, FrameTimelineVsyncId=13473363, IntendedVsync=37626153855400, Vsync=37628670521966, InputEventId=0, HandleInputStart=37628686590920, AnimationStart=37628686606220, PerformTraversalsStart=37628687051720, DrawStart=37629015557020, FrameDeadline=37626170522066, FrameInterval=37628686387420, FrameStartTime=16666666, SyncQueued=37629039191120, SyncStart=37629039621520, IssueDrawCommandsStart=37629040221820, SwapBuffers=37629058362120, FrameCompleted=37629071817220, DequeueBufferDuration=16600, QueueBufferDuration=150000, GpuCompleted=37629071817220, SwapBuffersCompleted=37629059935620, DisplayPresentTime=34359738536, CommandSubmissionCompleted=37629058362120, 

Thread started: <Thread Pool> #11

Thread started: <Thread Pool> #12

[EGL_emulation] app_time_stats: avg=204.93ms min=6.23ms max=1013.63ms count=6

[form.mauitester] Explicit concurrent copying GC freed 4785(240KB) AllocSpace objects, 18(436KB) LOS objects, 49% free, 4532KB/9064KB, paused 508us,44us total 6.733ms

[form.mauitester] Explicit concurrent copying GC freed 1551(90KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4521KB/9043KB, paused 277us,34us total 5.262ms

[form.mauitester] Explicit concurrent copying GC freed 1251(78KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4523KB/9046KB, paused 320us,35us total 5.906ms

[ProfileInstaller] Installing profile for com.companyname.core.platform.mauitester

[form.mauitester] Explicit concurrent copying GC freed 1557(98KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4537KB/9074KB, paused 324us,49us total 5.679ms

[form.mauitester] Explicit concurrent copying GC freed 428(36KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4532KB/9064KB, paused 251us,35us total 4.934ms

[form.mauitester] Explicit concurrent copying GC freed 57(33KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4530KB/9061KB, paused 315us,35us total 6.044ms

[form.mauitester] Explicit concurrent copying GC freed 1081(60KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4534KB/9069KB, paused 248us,35us total 5.165ms

[form.mauitester] Explicit concurrent copying GC freed 1254(78KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4535KB/9071KB, paused 317us,35us total 5.362ms

[form.mauitester] Explicit concurrent copying GC freed 1294(80KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4535KB/9071KB, paused 252us,35us total 5.111ms

[form.mauitester] Explicit concurrent copying GC freed 1251(65KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4534KB/9069KB, paused 256us,35us total 5.074ms

[form.mauitester] Explicit concurrent copying GC freed 1254(78KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4535KB/9071KB, paused 357us,40us total 5.756ms

[form.mauitester] Explicit concurrent copying GC freed 1168(69KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4530KB/9061KB, paused 294us,35us total 5.381ms

[form.mauitester] Explicit concurrent copying GC freed 176(30KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4531KB/9063KB, paused 341us,36us total 5.108ms

[form.mauitester] Explicit concurrent copying GC freed 1129(61KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4534KB/9069KB, paused 471us,35us total 5.191ms

[0:] LOG: [10:33:18.078] Starting Options Import Integration Test validation test...

[EGL_emulation] app_time_stats: avg=1347.63ms min=0.91ms max=21333.46ms count=16

[0:] LOG: [10:33:18.217] Starting test scenario: Options Import Integration Test

[0:] LOG: [10:33:18.224] Executing Wipe All Data for Testing...

[monodroid-assembly] open_from_bundles: failed to load bundled assembly FSharp.Core.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/FSharp.Core.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Core.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Core.dll

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Reactive.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Reactive.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Data.Sqlite.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Data.Common.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.ComponentModel.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Data.Sqlite.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Data.Common.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.ComponentModel.Primitives.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly SQLitePCLRaw.core.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Transactions.Local.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/SQLitePCLRaw.core.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Transactions.Local.dll [External]

[form.mauitester] Explicit concurrent copying GC freed 2035(125KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4553KB/9106KB, paused 258us,34us total 6.380ms

[monodroid-assembly] open_from_bundles: failed to load bundled assembly SQLitePCLRaw.batteries_v2.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/SQLitePCLRaw.batteries_v2.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly SQLitePCLRaw.provider.e_sqlite3.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/SQLitePCLRaw.provider.e_sqlite3.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.InteropServices.RuntimeInformation.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.InteropServices.RuntimeInformation.dll [External]

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM InvestmentOverviewSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BrokerFinancialSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BankSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BankAccountSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BrokerSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BrokerAccountSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM TickerCurrencySnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM TickerSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BankAccountMovements

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BankAccounts

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Banks

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Options

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM DividendDates

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM DividendTaxes

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Dividends

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Trades

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[EGL_emulation] app_time_stats: avg=14.83ms min=1.17ms max=18.56ms count=60

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM TickerSplits

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM TickerPrices

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Tickers

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BrokerMovements

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Currencies

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BrokerAccounts

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Brokers

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[monodroid-assembly] open_from_bundles: failed to load bundled assembly DynamicData.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/DynamicData.dll [External]

[0:] LOG: [10:33:19.430] Wipe All Data for Testing completed successfully in 00:01.205

[0:] LOG: [10:33:19.436] Executing Initialize MAUI Platform Services...

[0:] LOG: [10:33:19.439] Initialize MAUI Platform Services completed successfully in 00:00.004

[0:] LOG: [10:33:19.447] Executing Overview.InitDatabase()...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[EGL_emulation] app_time_stats: avg=16.52ms min=14.79ms max=18.84ms count=61

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[EGL_emulation] app_time_stats: avg=16.44ms min=13.85ms max=17.62ms count=61

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[EGL_emulation] app_time_stats: avg=16.38ms min=12.87ms max=18.16ms count=61

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[EGL_emulation] app_time_stats: avg=16.53ms min=14.19ms max=18.89ms count=60

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[EGL_emulation] app_time_stats: avg=16.45ms min=12.46ms max=19.80ms count=60

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[EGL_emulation] app_time_stats: avg=16.37ms min=13.75ms max=19.70ms count=61

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[EGL_emulation] app_time_stats: avg=12.82ms min=0.92ms max=36.33ms count=60

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[EGL_emulation] app_time_stats: avg=1.64ms min=0.79ms max=4.52ms count=61

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[EGL_emulation] app_time_stats: avg=1.42ms min=0.78ms max=3.69ms count=58

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[EGL_emulation] app_time_stats: avg=1.55ms min=0.89ms max=3.70ms count=60

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[EGL_emulation] app_time_stats: avg=1.66ms min=0.82ms max=3.73ms count=61

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[EGL_emulation] app_time_stats: avg=1.58ms min=0.89ms max=3.81ms count=61

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Brokers
        (
            Name,
            Image,
            SupportedBroker
        )
        VALUES
        (
            @Name,
            @Image,
            @SupportedBroker
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Brokers
        (
            Name,
            Image,
            SupportedBroker
        )
        VALUES
        (
            @Name,
            @Image,
            @SupportedBroker
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Brokers
        (
            Name,
            Image,
            SupportedBroker
        )
        VALUES
        (
            @Name,
            @Image,
            @SupportedBroker
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Brokers
        (
            Name,
            Image,
            SupportedBroker
        )
        VALUES
        (
            @Name,
            @Image,
            @SupportedBroker
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 6 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 6

[EGL_emulation] app_time_stats: avg=1.45ms min=0.85ms max=2.86ms count=61

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] LOG: [10:33:32.416] Overview.InitDatabase() completed successfully in 00:12.969

[0:] LOG: [10:33:32.423] Executing Overview.LoadData()...

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO TickerSnapshots
        (
            Date,
            TickerId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO TickerSnapshots
        (
            Date,
            TickerId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO TickerCurrencySnapshots
        (
            Date,
            TickerId,
            CurrencyId,
            TickerSnapshotId,
            TotalShares,
            Weight,
            CostBasis,
            RealCost,
            Dividends,
            Options,
            TotalIncomes,
            Unrealized,
            Realized,
            Performance,
            LatestPrice,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CurrencyId,
            @TickerSnapshotId,
            @TotalShares,
            @Weight,
            @CostBasis,
            @RealCost,
            @Dividends,
            @Options,
            @TotalIncomes,
            @Unrealized,
            @Realized,
            @Performance,
            @LatestPrice,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO TickerCurrencySnapshots
        (
            Date,
            TickerId,
            CurrencyId,
            TickerSnapshotId,
            TotalShares,
            Weight,
            CostBasis,
            RealCost,
            Dividends,
            Options,
            TotalIncomes,
            Unrealized,
            Realized,
            Performance,
            LatestPrice,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CurrencyId,
            @TickerSnapshotId,
            @TotalShares,
            @Weight,
            @CostBasis,
            @RealCost,
            @Dividends,
            @Options,
            @TotalIncomes,
            @Unrealized,
            @Realized,
            @Performance,
            @LatestPrice,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] LOG: [10:33:32.800] Overview.LoadData() completed successfully in 00:00.377

[0:] LOG: [10:33:32.804] Executing Wait for reactive collections...

[Choreographer] Skipped 876 frames!  The application may be doing too much work on its main thread.

[RippleDrawable] The RippleDrawable.STYLE_PATTERNED animation is not supported for a non-hardware accelerated Canvas. Skipping animation.

[form.mauitester] Explicit concurrent copying GC freed 502(103KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4562KB/9124KB, paused 260us,36us total 6.640ms

[0:] LOG: [10:33:33.110] Wait for reactive collections completed successfully in 00:00.306

[0:] LOG: [10:33:33.116] Executing Find Tastytrade Broker...

[0:] LOG: [10:33:33.121] Find Tastytrade Broker completed successfully in 00:00.006

[0:] LOG: [10:33:33.126] Executing Execute Options Import Integration Test...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccounts
        (
            BrokerId,
            AccountNumber,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @BrokerId,
            @AccountNumber,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccounts
        (
            BrokerId,
            AccountNumber,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @BrokerId,
            @AccountNumber,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[EGL_emulation] app_time_stats: avg=4.13ms min=0.84ms max=17.62ms count=60

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialDefault] Creating default snapshot for BrokerAccountId: 1, Date: 2025-09-27T23:59:59

[0:] [BrokerFinancialDefault] Step 1: Getting default currency...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 1: Getting preference currency...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 2: Preference currency = USD

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 3: Calling CurrencyExtensions.Do.getByCode...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 4: CurrencyExtensions.Do.getByCode completed

[0:] [SnapshotManagerUtils] getDefaultCurrency - Success: Found currency ID = 141

[0:] [BrokerFinancialDefault] Step 2: Currency ID obtained: 141

[0:] [BrokerFinancialDefault] Step 3: Creating base snapshot...

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialDefault] Step 4: Base snapshot created with ID: 0

[0:] [BrokerFinancialDefault] Step 5: Creating snapshot object...

[0:] [BrokerFinancialDefault] Step 6: Snapshot object created successfully

[0:] [BrokerFinancialDefault] About to save default snapshot with CurrencyId: 141, Deposited: 0

[0:] [BrokerFinancialDefault] Step 7: Calling snapshot.save()...

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 0, MovementCounter: 0

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 0, MovementCounter: 0

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialDefault] Step 8: snapshot.save() completed successfully

[0:] [BrokerFinancialDefault] Default snapshot saved successfully

[0:] [BrokerAccountSnapshotLoader] Loading financial snapshots for BrokerAccountId: 1, SnapshotDate: 2025-09-27T23:59:59

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerAccountSnapshotLoader] Found 1 financial snapshots

[0:] [DatabaseToModels] Converting broker account snapshot - BrokerAccountId: 1, FinancialSnapshots count: 1

[0:] [DatabaseToModels] Converting 1 financial snapshots for BrokerAccount

[0:] [DatabaseToModels] Financial snapshot - Deposited: 0.0, MovementCounter: 0

[0:] [BrokerFinancialDefault] Creating default snapshot for BrokerAccountId: 1, Date: 2025-09-27T23:59:59

[0:] [BrokerFinancialDefault] Step 1: Getting default currency...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 1: Getting preference currency...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 2: Preference currency = USD

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 3: Calling CurrencyExtensions.Do.getByCode...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 4: CurrencyExtensions.Do.getByCode completed

[0:] [SnapshotManagerUtils] getDefaultCurrency - Success: Found currency ID = 141

[0:] [BrokerFinancialDefault] Step 2: Currency ID obtained: 141

[0:] [BrokerFinancialDefault] Step 3: Creating base snapshot...

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialDefault] Step 4: Base snapshot created with ID: 0

[0:] [BrokerFinancialDefault] Step 5: Creating snapshot object...

[0:] [BrokerFinancialDefault] Step 6: Snapshot object created successfully

[0:] [BrokerFinancialDefault] About to save default snapshot with CurrencyId: 141, Deposited: 0

[0:] [BrokerFinancialDefault] Step 7: Calling snapshot.save()...

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 0, MovementCounter: 0

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 0, MovementCounter: 0

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialDefault] Step 8: snapshot.save() completed successfully

[0:] [BrokerFinancialDefault] Default snapshot saved successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerSnapshots
        (
            Date,
            BrokerId,
            AccountCount,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @AccountCount,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 6 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerSnapshots
        (
            Date,
            BrokerId,
            AccountCount,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @AccountCount,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 6

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.IO.Compression.ZipFile.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.IO.Compression.ZipFile.dll [External]

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 6 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 6

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 6 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 6

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[EGL_emulation] app_time_stats: avg=16.34ms min=5.41ms max=23.02ms count=61

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 6 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 6

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 15 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 15

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[EGL_emulation] app_time_stats: avg=16.55ms min=14.35ms max=18.99ms count=60

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 15 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 15

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 15 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 15

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 15 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 15

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '0.02'

[0:] [DataReaderExtensions] Parsed decimal value: 0.02

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 1, Type: Fee, Amount: 0.02, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '844.56'

[0:] [DataReaderExtensions] Parsed decimal value: 844.56

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 2, Type: Deposit, Amount: 844.56, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '24.23'

[0:] [DataReaderExtensions] Parsed decimal value: 24.23

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 3, Type: Deposit, Amount: 24.23, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 4, Type: Deposit, Amount: 10.0, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '16.0'

[0:] [DataReaderExtensions] Parsed decimal value: 16.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '14.86'

[0:] [DataReaderExtensions] Parsed decimal value: 14.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '6.5'

[0:] [DataReaderExtensions] Parsed decimal value: 6.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '4.86'

[0:] [DataReaderExtensions] Parsed decimal value: 4.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.0'

[0:] [DataReaderExtensions] Parsed decimal value: 21.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '9.0'

[0:] [DataReaderExtensions] Parsed decimal value: 9.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '8.87'

[0:] [DataReaderExtensions] Parsed decimal value: 8.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.5'

[0:] [DataReaderExtensions] Parsed decimal value: 21.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '17.0'

[0:] [DataReaderExtensions] Parsed decimal value: 17.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '15.86'

[0:] [DataReaderExtensions] Parsed decimal value: 15.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '17.0'

[0:] [DataReaderExtensions] Parsed decimal value: 17.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '16.87'

[0:] [DataReaderExtensions] Parsed decimal value: 16.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '0.86'

[0:] [DataReaderExtensions] Parsed decimal value: 0.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '8.0'

[0:] [DataReaderExtensions] Parsed decimal value: 8.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '7.87'

[0:] [DataReaderExtensions] Parsed decimal value: 7.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.5'

[0:] [DataReaderExtensions] Parsed decimal value: 4.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '11.0'

[0:] [DataReaderExtensions] Parsed decimal value: 11.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '9.87'

[0:] [DataReaderExtensions] Parsed decimal value: 9.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.0'

[0:] [DataReaderExtensions] Parsed decimal value: 21.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '19.0'

[0:] [DataReaderExtensions] Parsed decimal value: 19.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '17.86'

[0:] [DataReaderExtensions] Parsed decimal value: 17.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.5'

[0:] [DataReaderExtensions] Parsed decimal value: 21.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '19.0'

[0:] [DataReaderExtensions] Parsed decimal value: 19.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '17.86'

[0:] [DataReaderExtensions] Parsed decimal value: 17.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.5'

[0:] [DataReaderExtensions] Parsed decimal value: 4.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '2.87'

[0:] [DataReaderExtensions] Parsed decimal value: 2.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '35.0'

[0:] [DataReaderExtensions] Parsed decimal value: 35.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [BrokerAccountSnapshotManager] Entering handleBrokerAccountChange - BrokerAccountId: 1, Date: 2024-04-22T22:00:00

[EGL_emulation] app_time_stats: avg=16.57ms min=14.33ms max=18.23ms count=61

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-22T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-22T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerAccountSnapshotManager] Snapshot retrieved/created - Id: 2, Date: 2024-04-22T23:59:59

[0:] [BrokerAccountSnapshotManager] Movement retrieval date: 2024-04-22T00:00:01

[0:] [BrokerAccountSnapshotManager] getAllMovementsFromDate - BrokerAccountId: 1, Date: 2024-04-22T00:00:01

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 4, Type: Deposit, Amount: 10.0, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '24.23'

[0:] [DataReaderExtensions] Parsed decimal value: 24.23

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 3, Type: Deposit, Amount: 24.23, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '844.56'

[0:] [DataReaderExtensions] Parsed decimal value: 844.56

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 2, Type: Deposit, Amount: 844.56, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '0.02'

[0:] [DataReaderExtensions] Parsed decimal value: 0.02

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 1, Type: Fee, Amount: 0.02, BrokerAccountId: 1

[0:] [BrokerAccountSnapshotManager] BrokerMovements loaded: 4

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '35.0'

[0:] [DataReaderExtensions] Parsed decimal value: 35.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '19.0'

[0:] [DataReaderExtensions] Parsed decimal value: 19.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '17.86'

[0:] [DataReaderExtensions] Parsed decimal value: 17.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.5'

[0:] [DataReaderExtensions] Parsed decimal value: 4.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '2.87'

[0:] [DataReaderExtensions] Parsed decimal value: 2.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '11.0'

[0:] [DataReaderExtensions] Parsed decimal value: 11.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '9.87'

[0:] [DataReaderExtensions] Parsed decimal value: 9.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.0'

[0:] [DataReaderExtensions] Parsed decimal value: 21.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '19.0'

[0:] [DataReaderExtensions] Parsed decimal value: 19.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '17.86'

[0:] [DataReaderExtensions] Parsed decimal value: 17.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.5'

[0:] [DataReaderExtensions] Parsed decimal value: 21.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '0.86'

[0:] [DataReaderExtensions] Parsed decimal value: 0.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '8.0'

[0:] [DataReaderExtensions] Parsed decimal value: 8.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '7.87'

[0:] [DataReaderExtensions] Parsed decimal value: 7.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.5'

[0:] [DataReaderExtensions] Parsed decimal value: 4.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '17.0'

[0:] [DataReaderExtensions] Parsed decimal value: 17.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '16.87'

[0:] [DataReaderExtensions] Parsed decimal value: 16.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '17.0'

[0:] [DataReaderExtensions] Parsed decimal value: 17.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '15.86'

[0:] [DataReaderExtensions] Parsed decimal value: 15.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '4.86'

[0:] [DataReaderExtensions] Parsed decimal value: 4.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.0'

[0:] [DataReaderExtensions] Parsed decimal value: 21.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '9.0'

[0:] [DataReaderExtensions] Parsed decimal value: 9.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '8.87'

[0:] [DataReaderExtensions] Parsed decimal value: 8.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.5'

[0:] [DataReaderExtensions] Parsed decimal value: 21.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '16.0'

[0:] [DataReaderExtensions] Parsed decimal value: 16.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '14.86'

[0:] [DataReaderExtensions] Parsed decimal value: 14.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '6.5'

[0:] [DataReaderExtensions] Parsed decimal value: 6.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 4, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 4

[0:] [BrokerAccountMovementData] Movement for currency 141 - ID: 1, Type: Fee, Amount: 0.02

[0:] [BrokerAccountMovementData] Movement for currency 141 - ID: 2, Type: Deposit, Amount: 844.56

[0:] [BrokerAccountMovementData] Movement for currency 141 - ID: 3, Type: Deposit, Amount: 24.23

[0:] [BrokerAccountMovementData] Movement for currency 141 - ID: 4, Type: Deposit, Amount: 10.0

[0:] [BrokerAccountSnapshotManager] Movements loaded - HasMovements: True

[0:] [BrokerAccountSnapshotManager] Future snapshots loaded - Count: 1

[0:] [BrokerAccountSnapshotManager] Date analysis - DatesWithMovements: 8, DatesWithSnapshots: 1, MissingSnapshotDates: 8

[0:] [BrokerAccountSnapshotManager] Decision: Cascade update with missing snapshots creation

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-23T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-23T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-24T23:59:59

[EGL_emulation] app_time_stats: avg=16.50ms min=14.15ms max=18.47ms count=61

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-24T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-25T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-25T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-26T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-26T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-29T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-29T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-30T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-30T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 1, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 1

[0:] [BrokerAccountMovementData] Movement for currency 141 - ID: 4, Type: Deposit, Amount: 10.0

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2024-04-22T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: True, TotalMovementCount: 1, UniqueCurrencies: 1

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 2

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 4/22/2024 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 0

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 0

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: [141]

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: []

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 1

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 0

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: True

[0:] [BrokerFinancialSnapshotManager] Currency 141 has 1 broker movements

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: True, HasPrevious: False, HasExisting: False

[0:] [BrokerFinancialSnapshotManager] SCENARIO B: New movements, no previous snapshot, no existing snapshot

[0:] [BrokerFinancialsMetricsFromMovements] Starting calculate for currency 141

[0:] [BrokerFinancialsMetricsFromMovements] Input movements - BrokerMovements: 1, Trades: 0, Dividends: 0

[0:] [FinancialCalculations] calculateFinancialSummary - Processing 1 movements, CurrencyFilter: 

[0:] [FinancialCalculations] calculateTotalDeposited - Processing 1 total movements

[0:] [FinancialCalculations] Movement ID 4, Type: Deposit, Amount: 10.0

[0:] [FinancialCalculations] Found 1 deposit movements

[0:] [FinancialCalculations] Total deposited amount calculated: 10.0

[0:] [FinancialCalculations] Financial summary calculated - TotalDeposited: 10.0, MovementCount: 1

[0:] [BrokerFinancialsMetricsFromMovements] BrokerMovement summary - TotalDeposited: 10.0, TotalWithdrawn: 0

[0:] [BrokerFinancialsMetricsFromMovements] Conversion impact: 0

[0:] [BrokerFinancialsMetricsFromMovements] After conversion adjustment - Deposited: 10.0, Withdrawn: 0

[0:] [OptionTradeCalculations] Total realized gains calculated: $0.00

[0:] [BrokerFinancialsMetricsFromMovements] Final calculated metrics - Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Starting create for currency 141, date 2024-04-22T23:59:59

[0:] [BrokerFinancialCumulativeFinancial] Calculated metrics - Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Has previous snapshot: False

[0:] [BrokerFinancialCumulativeFinancial] No previous snapshot, using calculated Deposited: 10.0

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-22T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-22T23:59:59

[EGL_emulation] app_time_stats: avg=16.37ms min=13.22ms max=19.27ms count=60

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialCumulativeFinancial] Created snapshot to save - Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 10.0, MovementCounter: 1

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialCumulativeFinancial] Snapshot saved successfully with ID: 0

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 1, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 1

[0:] [BrokerAccountMovementData] Movement for currency 141 - ID: 3, Type: Deposit, Amount: 24.23

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2024-04-23T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: True, TotalMovementCount: 1, UniqueCurrencies: 1

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 3

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 4/23/2024 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/22/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency 141 with 1 snapshots

[0:] [BrokerFinancialSnapshotManager] Latest snapshot for currency 141: Date=4/22/2024 11:59:59 PM, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] Relevant previous: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: [141]

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: [141]

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 1

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: True

[0:] [BrokerFinancialSnapshotManager] Currency 141 has 1 broker movements

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: True, HasPrevious: True, HasExisting: False

[0:] [BrokerFinancialSnapshotManager] SCENARIO A: New movements, has previous snapshot, no existing snapshot

[0:] [BrokerFinancialsMetricsFromMovements] Starting calculate for currency 141

[0:] [BrokerFinancialsMetricsFromMovements] Input movements - BrokerMovements: 1, Trades: 0, Dividends: 0

[0:] [FinancialCalculations] calculateFinancialSummary - Processing 1 movements, CurrencyFilter: 

[0:] [FinancialCalculations] calculateTotalDeposited - Processing 1 total movements

[0:] [FinancialCalculations] Movement ID 3, Type: Deposit, Amount: 24.23

[0:] [FinancialCalculations] Found 1 deposit movements

[0:] [FinancialCalculations] Total deposited amount calculated: 24.23

[0:] [FinancialCalculations] Financial summary calculated - TotalDeposited: 24.23, MovementCount: 1

[0:] [BrokerFinancialsMetricsFromMovements] BrokerMovement summary - TotalDeposited: 24.23, TotalWithdrawn: 0

[0:] [BrokerFinancialsMetricsFromMovements] Conversion impact: 0

[0:] [BrokerFinancialsMetricsFromMovements] After conversion adjustment - Deposited: 24.23, Withdrawn: 0

[0:] [OptionTradeCalculations] Total realized gains calculated: $0.00

[0:] [BrokerFinancialsMetricsFromMovements] Final calculated metrics - Deposited: 24.23, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Starting create for currency 141, date 2024-04-23T23:59:59

[0:] [BrokerFinancialCumulativeFinancial] Calculated metrics - Deposited: 24.23, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Has previous snapshot: True

[0:] [BrokerFinancialCumulativeFinancial] Cumulative Deposited: previous 10.0 + current 24.23 = 34.23

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-23T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-23T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialCumulativeFinancial] Created snapshot to save - Deposited: 34.23, MovementCounter: 2

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 34.23, MovementCounter: 2

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 34.23, MovementCounter: 2

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialCumulativeFinancial] Snapshot saved successfully with ID: 0

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 1, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 1

[0:] [BrokerAccountMovementData] Movement for currency 141 - ID: 2, Type: Deposit, Amount: 844.56

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2024-04-24T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: True, TotalMovementCount: 1, UniqueCurrencies: 1

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '34.23'

[0:] [DataReaderExtensions] Parsed decimal value: 34.23

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[EGL_emulation] app_time_stats: avg=16.40ms min=13.52ms max=19.64ms count=60

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 4

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-23T23:59:59, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 4/24/2024 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/22/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/23/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 2

[0:] [BrokerFinancialSnapshotManager] Processing currency 141 with 2 snapshots

[0:] [BrokerFinancialSnapshotManager] Latest snapshot for currency 141: Date=4/23/2024 11:59:59 PM, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] Relevant previous: Date=2024-04-23T23:59:59, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: [141]

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: [141]

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 1

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: True

[0:] [BrokerFinancialSnapshotManager] Currency 141 has 1 broker movements

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: True, HasPrevious: True, HasExisting: False

[0:] [BrokerFinancialSnapshotManager] SCENARIO A: New movements, has previous snapshot, no existing snapshot

[0:] [BrokerFinancialsMetricsFromMovements] Starting calculate for currency 141

[0:] [BrokerFinancialsMetricsFromMovements] Input movements - BrokerMovements: 1, Trades: 0, Dividends: 0

[0:] [FinancialCalculations] calculateFinancialSummary - Processing 1 movements, CurrencyFilter: 

[0:] [FinancialCalculations] calculateTotalDeposited - Processing 1 total movements

[0:] [FinancialCalculations] Movement ID 2, Type: Deposit, Amount: 844.56

[0:] [FinancialCalculations] Found 1 deposit movements

[0:] [FinancialCalculations] Total deposited amount calculated: 844.56

[0:] [FinancialCalculations] Financial summary calculated - TotalDeposited: 844.56, MovementCount: 1

[0:] [BrokerFinancialsMetricsFromMovements] BrokerMovement summary - TotalDeposited: 844.56, TotalWithdrawn: 0

[0:] [BrokerFinancialsMetricsFromMovements] Conversion impact: 0

[0:] [BrokerFinancialsMetricsFromMovements] After conversion adjustment - Deposited: 844.56, Withdrawn: 0

[0:] [OptionTradeCalculations] Total realized gains calculated: $0.00

[0:] [BrokerFinancialsMetricsFromMovements] Final calculated metrics - Deposited: 844.56, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Starting create for currency 141, date 2024-04-24T23:59:59

[0:] [BrokerFinancialCumulativeFinancial] Calculated metrics - Deposited: 844.56, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Has previous snapshot: True

[0:] [BrokerFinancialCumulativeFinancial] Cumulative Deposited: previous 34.23 + current 844.56 = 878.79

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-24T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-24T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialCumulativeFinancial] Created snapshot to save - Deposited: 878.79, MovementCounter: 3

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 878.79, MovementCounter: 3

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 878.79, MovementCounter: 3

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialCumulativeFinancial] Snapshot saved successfully with ID: 0

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 0, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 0

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2024-04-25T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: True, TotalMovementCount: 1, UniqueCurrencies: 1

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '34.23'

[0:] [DataReaderExtensions] Parsed decimal value: 34.23

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 5

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-23T23:59:59, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-24T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 4/25/2024 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/22/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/23/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/24/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 3

[0:] [BrokerFinancialSnapshotManager] Processing currency 141 with 3 snapshots

[0:] [BrokerFinancialSnapshotManager] Latest snapshot for currency 141: Date=4/24/2024 11:59:59 PM, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 1

[EGL_emulation] app_time_stats: avg=16.39ms min=11.22ms max=20.72ms count=61

[0:] [BrokerFinancialSnapshotManager] Relevant previous: Date=2024-04-24T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: [141]

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: [141]

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 1

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: True

[0:] [BrokerFinancialSnapshotManager] Currency 141 has 0 broker movements

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: True, HasPrevious: True, HasExisting: False

[0:] [BrokerFinancialSnapshotManager] SCENARIO A: New movements, has previous snapshot, no existing snapshot

[0:] [BrokerFinancialsMetricsFromMovements] Starting calculate for currency 141

[0:] [BrokerFinancialsMetricsFromMovements] Input movements - BrokerMovements: 0, Trades: 0, Dividends: 0

[0:] [FinancialCalculations] calculateFinancialSummary - Processing 0 movements, CurrencyFilter: 

[0:] [FinancialCalculations] calculateTotalDeposited - Processing 0 total movements

[0:] [FinancialCalculations] Found 0 deposit movements

[0:] [FinancialCalculations] Total deposited amount calculated: 0

[0:] [FinancialCalculations] Financial summary calculated - TotalDeposited: 0, MovementCount: 0

[0:] [BrokerFinancialsMetricsFromMovements] BrokerMovement summary - TotalDeposited: 0, TotalWithdrawn: 0

[0:] [BrokerFinancialsMetricsFromMovements] Conversion impact: 0

[0:] [BrokerFinancialsMetricsFromMovements] After conversion adjustment - Deposited: 0, Withdrawn: 0

[0:] [OptionTradeCalculations] Auto-expiring 1 positions for expired options (expiration: 2024-05-03, current: 2025-09-27)

[0:] [OptionTradeCalculations] SellToOpen expired: realizing gain of $33.86

[0:] [OptionTradeCalculations] Total realized gains calculated: $33.86

[0:] [BrokerFinancialsMetricsFromMovements] Final calculated metrics - Deposited: 0, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Starting create for currency 141, date 2024-04-25T23:59:59

[0:] [BrokerFinancialCumulativeFinancial] Calculated metrics - Deposited: 0, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Has previous snapshot: True

[0:] [BrokerFinancialCumulativeFinancial] Cumulative Deposited: previous 878.79 + current 0 = 878.79

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-25T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-25T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialCumulativeFinancial] Created snapshot to save - Deposited: 878.79, MovementCounter: 4

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 878.79, MovementCounter: 4

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 878.79, MovementCounter: 4

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialCumulativeFinancial] Snapshot saved successfully with ID: 0

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 0, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 0

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2024-04-26T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: True, TotalMovementCount: 4, UniqueCurrencies: 1

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '34.23'

[0:] [DataReaderExtensions] Parsed decimal value: 34.23

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 6

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-23T23:59:59, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-24T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-25T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 4/26/2024 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/22/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/23/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/24/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/25/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 4

[0:] [BrokerFinancialSnapshotManager] Processing currency 141 with 4 snapshots

[0:] [BrokerFinancialSnapshotManager] Latest snapshot for currency 141: Date=4/25/2024 11:59:59 PM, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] Relevant previous: Date=2024-04-25T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: [141]

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: [141]

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 1

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: True

[0:] [BrokerFinancialSnapshotManager] Currency 141 has 0 broker movements

[EGL_emulation] app_time_stats: avg=16.58ms min=14.49ms max=18.54ms count=61

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: True, HasPrevious: True, HasExisting: False

[0:] [BrokerFinancialSnapshotManager] SCENARIO A: New movements, has previous snapshot, no existing snapshot

[0:] [BrokerFinancialsMetricsFromMovements] Starting calculate for currency 141

[0:] [BrokerFinancialsMetricsFromMovements] Input movements - BrokerMovements: 0, Trades: 0, Dividends: 0

[0:] [FinancialCalculations] calculateFinancialSummary - Processing 0 movements, CurrencyFilter: 

[0:] [FinancialCalculations] calculateTotalDeposited - Processing 0 total movements

[0:] [FinancialCalculations] Found 0 deposit movements

[0:] [FinancialCalculations] Total deposited amount calculated: 0

[0:] [FinancialCalculations] Financial summary calculated - TotalDeposited: 0, MovementCount: 0

[0:] [BrokerFinancialsMetricsFromMovements] BrokerMovement summary - TotalDeposited: 0, TotalWithdrawn: 0

[0:] [BrokerFinancialsMetricsFromMovements] Conversion impact: 0

[0:] [BrokerFinancialsMetricsFromMovements] After conversion adjustment - Deposited: 0, Withdrawn: 0

[0:] [OptionTradeCalculations] Auto-expiring 1 positions for expired options (expiration: 2024-05-03, current: 2025-09-27)

[0:] [OptionTradeCalculations] BuyToOpen expired: realizing loss of $2.87

[0:] [OptionTradeCalculations] Auto-expiring 1 positions for expired options (expiration: 2024-05-03, current: 2025-09-27)

[0:] [OptionTradeCalculations] SellToOpen expired: realizing gain of $17.86

[0:] [OptionTradeCalculations] Auto-expiring 1 positions for expired options (expiration: 2024-05-03, current: 2025-09-27)

[0:] [OptionTradeCalculations] SellToOpen expired: realizing gain of $17.86

[0:] [OptionTradeCalculations] Auto-expiring 1 positions for expired options (expiration: 2024-05-03, current: 2025-09-27)

[0:] [OptionTradeCalculations] BuyToOpen expired: realizing loss of $9.87

[0:] [OptionTradeCalculations] Total realized gains calculated: $22.98

[0:] [BrokerFinancialsMetricsFromMovements] Final calculated metrics - Deposited: 0, MovementCounter: 4

[0:] [BrokerFinancialCumulativeFinancial] Starting create for currency 141, date 2024-04-26T23:59:59

[0:] [BrokerFinancialCumulativeFinancial] Calculated metrics - Deposited: 0, MovementCounter: 4

[0:] [BrokerFinancialCumulativeFinancial] Has previous snapshot: True

[0:] [BrokerFinancialCumulativeFinancial] Cumulative Deposited: previous 878.79 + current 0 = 878.79

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-26T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-26T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialCumulativeFinancial] Created snapshot to save - Deposited: 878.79, MovementCounter: 8

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 878.79, MovementCounter: 8

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 878.79, MovementCounter: 8

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialCumulativeFinancial] Snapshot saved successfully with ID: 0

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 1, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 1

[0:] [BrokerAccountMovementData] Movement for currency 141 - ID: 1, Type: Fee, Amount: 0.02

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2024-04-27T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: True, TotalMovementCount: 1, UniqueCurrencies: 1

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '56.84'

[0:] [DataReaderExtensions] Parsed decimal value: 56.84

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '12.74'

[0:] [DataReaderExtensions] Parsed decimal value: 12.74

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.68'

[0:] [DataReaderExtensions] Parsed decimal value: 0.68

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '69.58'

[0:] [DataReaderExtensions] Parsed decimal value: 69.58

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '34.23'

[0:] [DataReaderExtensions] Parsed decimal value: 34.23

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 7

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-23T23:59:59, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-24T23:59:59, CurrencyId=141, Deposited=878.79

[form.mauitester] Explicit concurrent copying GC freed 340(103KB) AllocSpace objects, 12(240KB) LOS objects, 49% free, 4554KB/9108KB, paused 621us,36us total 5.998ms

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-25T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-26T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 4/27/2024 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/22/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/23/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/24/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/25/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/26/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 5

[EGL_emulation] app_time_stats: avg=16.37ms min=14.43ms max=18.60ms count=60

[0:] [BrokerFinancialSnapshotManager] Processing currency 141 with 5 snapshots

[0:] [BrokerFinancialSnapshotManager] Latest snapshot for currency 141: Date=4/26/2024 11:59:59 PM, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] Relevant previous: Date=2024-04-26T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: [141]

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: [141]

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 1

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: True

[0:] [BrokerFinancialSnapshotManager] Currency 141 has 1 broker movements

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: True, HasPrevious: True, HasExisting: False

[0:] [BrokerFinancialSnapshotManager] SCENARIO A: New movements, has previous snapshot, no existing snapshot

[0:] [BrokerFinancialsMetricsFromMovements] Starting calculate for currency 141

[0:] [BrokerFinancialsMetricsFromMovements] Input movements - BrokerMovements: 1, Trades: 0, Dividends: 0

[0:] [FinancialCalculations] calculateFinancialSummary - Processing 1 movements, CurrencyFilter: 

[0:] [FinancialCalculations] calculateTotalDeposited - Processing 1 total movements

[0:] [FinancialCalculations] Movement ID 1, Type: Fee, Amount: 0.02

[0:] [FinancialCalculations] Found 0 deposit movements

[0:] [FinancialCalculations] Total deposited amount calculated: 0

[0:] [FinancialCalculations] Financial summary calculated - TotalDeposited: 0, MovementCount: 1

[0:] [BrokerFinancialsMetricsFromMovements] BrokerMovement summary - TotalDeposited: 0, TotalWithdrawn: 0

[0:] [BrokerFinancialsMetricsFromMovements] Conversion impact: 0

[0:] [BrokerFinancialsMetricsFromMovements] After conversion adjustment - Deposited: 0, Withdrawn: 0

[0:] [OptionTradeCalculations] Total realized gains calculated: $0.00

[0:] [BrokerFinancialsMetricsFromMovements] Final calculated metrics - Deposited: 0, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Starting create for currency 141, date 2024-04-27T23:59:59

[0:] [BrokerFinancialCumulativeFinancial] Calculated metrics - Deposited: 0, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Has previous snapshot: True

[0:] [BrokerFinancialCumulativeFinancial] Cumulative Deposited: previous 878.79 + current 0 = 878.79

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialCumulativeFinancial] Created snapshot to save - Deposited: 878.79, MovementCounter: 9

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 878.79, MovementCounter: 9

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 878.79, MovementCounter: 9

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialCumulativeFinancial] Snapshot saved successfully with ID: 0

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 0, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 0

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2024-04-29T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: True, TotalMovementCount: 6, UniqueCurrencies: 1

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '56.84'

[0:] [DataReaderExtensions] Parsed decimal value: 56.84

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '12.74'

[0:] [DataReaderExtensions] Parsed decimal value: 12.74

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.7'

[0:] [DataReaderExtensions] Parsed decimal value: 0.7

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '69.58'

[0:] [DataReaderExtensions] Parsed decimal value: 69.58

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '56.84'

[0:] [DataReaderExtensions] Parsed decimal value: 56.84

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '12.74'

[0:] [DataReaderExtensions] Parsed decimal value: 12.74

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.68'

[0:] [DataReaderExtensions] Parsed decimal value: 0.68

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '69.58'

[0:] [DataReaderExtensions] Parsed decimal value: 69.58

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '34.23'

[0:] [DataReaderExtensions] Parsed decimal value: 34.23

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[EGL_emulation] app_time_stats: avg=16.40ms min=13.97ms max=18.84ms count=61

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 8

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-23T23:59:59, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-24T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-25T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-26T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-27T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 4/29/2024 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/22/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/23/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/24/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/25/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/26/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/27/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 6

[0:] [BrokerFinancialSnapshotManager] Processing currency 141 with 6 snapshots

[0:] [BrokerFinancialSnapshotManager] Latest snapshot for currency 141: Date=4/27/2024 11:59:59 PM, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] Relevant previous: Date=2024-04-27T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: [141]

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: [141]

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 1

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: True

[0:] [BrokerFinancialSnapshotManager] Currency 141 has 0 broker movements

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: True, HasPrevious: True, HasExisting: False

[0:] [BrokerFinancialSnapshotManager] SCENARIO A: New movements, has previous snapshot, no existing snapshot

[0:] [BrokerFinancialsMetricsFromMovements] Starting calculate for currency 141

[0:] [BrokerFinancialsMetricsFromMovements] Input movements - BrokerMovements: 0, Trades: 0, Dividends: 0

[0:] [FinancialCalculations] calculateFinancialSummary - Processing 0 movements, CurrencyFilter: 

[0:] [FinancialCalculations] calculateTotalDeposited - Processing 0 total movements

[0:] [FinancialCalculations] Found 0 deposit movements

[0:] [FinancialCalculations] Total deposited amount calculated: 0

[0:] [FinancialCalculations] Financial summary calculated - TotalDeposited: 0, MovementCount: 0

[0:] [BrokerFinancialsMetricsFromMovements] BrokerMovement summary - TotalDeposited: 0, TotalWithdrawn: 0

[0:] [BrokerFinancialsMetricsFromMovements] Conversion impact: 0

[0:] [BrokerFinancialsMetricsFromMovements] After conversion adjustment - Deposited: 0, Withdrawn: 0

[0:] [OptionTradeCalculations] Auto-expiring 1 positions for expired options (expiration: 2024-05-03, current: 2025-09-27)

[0:] [OptionTradeCalculations] SellToOpen expired: realizing gain of $15.86

[0:] [OptionTradeCalculations] Total realized gains calculated: $15.86

[0:] [BrokerFinancialsMetricsFromMovements] Final calculated metrics - Deposited: 0, MovementCounter: 6

[0:] [BrokerFinancialCumulativeFinancial] Starting create for currency 141, date 2024-04-29T23:59:59

[0:] [BrokerFinancialCumulativeFinancial] Calculated metrics - Deposited: 0, MovementCounter: 6

[0:] [BrokerFinancialCumulativeFinancial] Has previous snapshot: True

[0:] [BrokerFinancialCumulativeFinancial] Cumulative Deposited: previous 878.79 + current 0 = 878.79

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-29T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-29T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialCumulativeFinancial] Created snapshot to save - Deposited: 878.79, MovementCounter: 15

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 878.79, MovementCounter: 15

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 878.79, MovementCounter: 15

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialCumulativeFinancial] Snapshot saved successfully with ID: 0

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 0, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 0

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2024-04-30T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: True, TotalMovementCount: 1, UniqueCurrencies: 1

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '72.7'

[0:] [DataReaderExtensions] Parsed decimal value: 72.7

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '46.35'

[0:] [DataReaderExtensions] Parsed decimal value: 46.35

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '6.0'

[0:] [DataReaderExtensions] Parsed decimal value: 6.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '1.51'

[0:] [DataReaderExtensions] Parsed decimal value: 1.51

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '91.16'

[0:] [DataReaderExtensions] Parsed decimal value: 91.16

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '56.84'

[0:] [DataReaderExtensions] Parsed decimal value: 56.84

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '12.74'

[0:] [DataReaderExtensions] Parsed decimal value: 12.74

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.7'

[0:] [DataReaderExtensions] Parsed decimal value: 0.7

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '69.58'

[0:] [DataReaderExtensions] Parsed decimal value: 69.58

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '56.84'

[0:] [DataReaderExtensions] Parsed decimal value: 56.84

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '12.74'

[0:] [DataReaderExtensions] Parsed decimal value: 12.74

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.68'

[0:] [DataReaderExtensions] Parsed decimal value: 0.68

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '69.58'

[0:] [DataReaderExtensions] Parsed decimal value: 69.58

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[EGL_emulation] app_time_stats: avg=16.48ms min=14.26ms max=19.17ms count=61

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '34.23'

[0:] [DataReaderExtensions] Parsed decimal value: 34.23

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 9

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-23T23:59:59, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-24T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-25T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-26T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-27T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-29T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 4/30/2024 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/22/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/23/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/24/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/25/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/26/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/27/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/29/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 7

[0:] [BrokerFinancialSnapshotManager] Processing currency 141 with 7 snapshots

[0:] [BrokerFinancialSnapshotManager] Latest snapshot for currency 141: Date=4/29/2024 11:59:59 PM, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] Relevant previous: Date=2024-04-29T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: [141]

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: [141]

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 1

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: True

[0:] [BrokerFinancialSnapshotManager] Currency 141 has 0 broker movements

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: True, HasPrevious: True, HasExisting: False

[0:] [BrokerFinancialSnapshotManager] SCENARIO A: New movements, has previous snapshot, no existing snapshot

[0:] [BrokerFinancialsMetricsFromMovements] Starting calculate for currency 141

[0:] [BrokerFinancialsMetricsFromMovements] Input movements - BrokerMovements: 0, Trades: 0, Dividends: 0

[0:] [FinancialCalculations] calculateFinancialSummary - Processing 0 movements, CurrencyFilter: 

[0:] [FinancialCalculations] calculateTotalDeposited - Processing 0 total movements

[0:] [FinancialCalculations] Found 0 deposit movements

[0:] [FinancialCalculations] Total deposited amount calculated: 0

[0:] [FinancialCalculations] Financial summary calculated - TotalDeposited: 0, MovementCount: 0

[0:] [BrokerFinancialsMetricsFromMovements] BrokerMovement summary - TotalDeposited: 0, TotalWithdrawn: 0

[0:] [BrokerFinancialsMetricsFromMovements] Conversion impact: 0

[0:] [BrokerFinancialsMetricsFromMovements] After conversion adjustment - Deposited: 0, Withdrawn: 0

[0:] [OptionTradeCalculations] Auto-expiring 1 positions for expired options (expiration: 2024-05-10, current: 2025-09-27)

[0:] [OptionTradeCalculations] SellToOpen expired: realizing gain of $14.86

[0:] [OptionTradeCalculations] Total realized gains calculated: $14.86

[0:] [BrokerFinancialsMetricsFromMovements] Final calculated metrics - Deposited: 0, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Starting create for currency 141, date 2024-04-30T23:59:59

[0:] [BrokerFinancialCumulativeFinancial] Calculated metrics - Deposited: 0, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Has previous snapshot: True

[0:] [BrokerFinancialCumulativeFinancial] Cumulative Deposited: previous 878.79 + current 0 = 878.79

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-30T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-30T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialCumulativeFinancial] Created snapshot to save - Deposited: 878.79, MovementCounter: 16

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 878.79, MovementCounter: 16

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 878.79, MovementCounter: 16

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialCumulativeFinancial] Snapshot saved successfully with ID: 0

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 0, UniqueCurrencies: 0

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2025-09-27T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: False, TotalMovementCount: 0, UniqueCurrencies: 0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[EGL_emulation] app_time_stats: avg=16.35ms min=12.60ms max=19.32ms count=60

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '87.56'

[0:] [DataReaderExtensions] Parsed decimal value: 87.56

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '46.35'

[0:] [DataReaderExtensions] Parsed decimal value: 46.35

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '1.65'

[0:] [DataReaderExtensions] Parsed decimal value: 1.65

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '106.02'

[0:] [DataReaderExtensions] Parsed decimal value: 106.02

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '72.7'

[0:] [DataReaderExtensions] Parsed decimal value: 72.7

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '46.35'

[0:] [DataReaderExtensions] Parsed decimal value: 46.35

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '6.0'

[0:] [DataReaderExtensions] Parsed decimal value: 6.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '1.51'

[0:] [DataReaderExtensions] Parsed decimal value: 1.51

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '91.16'

[0:] [DataReaderExtensions] Parsed decimal value: 91.16

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '56.84'

[0:] [DataReaderExtensions] Parsed decimal value: 56.84

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '12.74'

[0:] [DataReaderExtensions] Parsed decimal value: 12.74

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.7'

[0:] [DataReaderExtensions] Parsed decimal value: 0.7

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '69.58'

[0:] [DataReaderExtensions] Parsed decimal value: 69.58

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '56.84'

[0:] [DataReaderExtensions] Parsed decimal value: 56.84

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '12.74'

[0:] [DataReaderExtensions] Parsed decimal value: 12.74

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.68'

[0:] [DataReaderExtensions] Parsed decimal value: 0.68

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '69.58'

[0:] [DataReaderExtensions] Parsed decimal value: 69.58

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '34.23'

[0:] [DataReaderExtensions] Parsed decimal value: 34.23

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 10

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-23T23:59:59, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-24T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-25T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-26T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-27T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-29T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-30T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 9/27/2025 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/22/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/23/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=34.23

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/24/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/25/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/26/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/27/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/29/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/30/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 8

[0:] [BrokerFinancialSnapshotManager] Processing currency 141 with 8 snapshots

[0:] [BrokerFinancialSnapshotManager] Latest snapshot for currency 141: Date=4/30/2024 11:59:59 PM, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] Relevant previous: Date=2024-04-30T23:59:59, CurrencyId=141, Deposited=878.79

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: []

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: [141]

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 0

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: False

[0:] [BrokerFinancialSnapshotManager] No movement data found for currency 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: False, HasPrevious: True, HasExisting: True

[0:] [BrokerFinancialSnapshotManager] SCENARIO G: No movements, has previous snapshot, has existing snapshot

[0:] [BrokerFinancialSnapshotManager] Previous snapshot - Deposited: 878.79, MovementCounter: 16

[0:] [BrokerFinancialSnapshotManager] Existing snapshot - Deposited: 0.0, MovementCounter: 0

[0:] [BrokerFinancialValidateAndCorrect] Starting snapshotConsistency check

[0:] [BrokerFinancialValidateAndCorrect] Previous: Deposited=878.79, MovementCounter=16

[0:] [BrokerFinancialValidateAndCorrect] Existing: Deposited=0.0, MovementCounter=0

[0:] [BrokerFinancialValidateAndCorrect] Snapshots differ - applying correction

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 2, CurrencyId: 141, Deposited: 878.79, MovementCounter: 16

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 2

[0:] [Database.Do.saveEntity] Step 4b: Using UPDATE SQL (existing entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        UPDATE BrokerFinancialSnapshots
        SET
            Date = @Date,
            BrokerId = @BrokerId,
            BrokerAccountId = @BrokerAccountId,
            CurrencyId = @CurrencyId,
            MovementCounter = @MovementCounter,
            BrokerSnapshotId = @BrokerSnapshotId,
            BrokerAccountSnapshotId = @BrokerAccountSnapshotId,
            RealizedGains = @RealizedGains,
            RealizedPercentage = @RealizedPercentage,
            UnrealizedGains = @UnrealizedGains,
            UnrealizedGainsPercentage = @UnrealizedGainsPercentage,
            Invested = @Invested,
            Commissions = @Commissions,
            Fees = @Fees,
            Deposited = @Deposited,
            Withdrawn = @Withdrawn,
            DividendsReceived = @DividendsReceived,
            OptionsIncome = @OptionsIncome,
            OtherIncome = @OtherIncome,
            OpenTrades = @OpenTrades,
            CreatedAt = @CreatedAt,
            UpdatedAt = @UpdatedAt
        WHERE
            Id = @Id
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 878.79, MovementCounter: 16

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[EGL_emulation] app_time_stats: avg=16.47ms min=13.50ms max=19.93ms count=60

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        UPDATE BrokerFinancialSnapshots
        SET
            Date = @Date,
            BrokerId = @BrokerId,
            BrokerAccountId = @BrokerAccountId,
            CurrencyId = @CurrencyId,
            MovementCounter = @MovementCounter,
            BrokerSnapshotId = @BrokerSnapshotId,
            BrokerAccountSnapshotId = @BrokerAccountSnapshotId,
            RealizedGains = @RealizedGains,
            RealizedPercentage = @RealizedPercentage,
            UnrealizedGains = @UnrealizedGains,
            UnrealizedGainsPercentage = @UnrealizedGainsPercentage,
            Invested = @Invested,
            Commissions = @Commissions,
            Fees = @Fees,
            Deposited = @Deposited,
            Withdrawn = @Withdrawn,
            DividendsReceived = @DividendsReceived,
            OptionsIncome = @OptionsIncome,
            OtherIncome = @OtherIncome,
            OpenTrades = @OpenTrades,
            CreatedAt = @CreatedAt,
            UpdatedAt = @UpdatedAt
        WHERE
            Id = @Id
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialValidateAndCorrect] Corrected snapshot saved - Deposited: 878.79, MovementCounter: 16

[0:] [BrokerFinancialSnapshotManager] SCENARIO G completed - snapshot consistency validation/correction applied

[0:] [BrokerAccountSnapshotManager] Exiting handleBrokerAccountChange - BrokerAccountId: 1

[0:] [BrokerAccountSnapshotLoader] Loading financial snapshots for BrokerAccountId: 1, SnapshotDate: 2025-09-27T23:59:59

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '87.56'

[0:] [DataReaderExtensions] Parsed decimal value: 87.56

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '46.35'

[0:] [DataReaderExtensions] Parsed decimal value: 46.35

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '1.65'

[0:] [DataReaderExtensions] Parsed decimal value: 1.65

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '878.79'

[0:] [DataReaderExtensions] Parsed decimal value: 878.79

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '106.02'

[0:] [DataReaderExtensions] Parsed decimal value: 106.02

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerAccountSnapshotLoader] Found 2 financial snapshots

[0:] [DatabaseToModels] Converting broker account snapshot - BrokerAccountId: 1, FinancialSnapshots count: 2

[0:] [DatabaseToModels] Converting 2 financial snapshots for BrokerAccount

[0:] [DatabaseToModels] Financial snapshot - Deposited: 878.79, MovementCounter: 16

[0:] [DatabaseToModels] Financial snapshot - Deposited: 0.0, MovementCounter: 0

[Choreographer] Skipped 817 frames!  The application may be doing too much work on its main thread.

[0:] ERROR: [10:33:46.783] ERROR: Execute Options Import Integration Test failed in 00:13.657: Financial validation failed - check expected vs actual values

[0:] LOG: [10:33:46.795] Options Import Integration Test test execution completed. Overall result: False

[form.mauitester] Explicit concurrent copying GC freed 1096(108KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4621KB/9242KB, paused 317us,45us total 6.184ms

[form.mauitester] Explicit concurrent copying GC freed 1810(162KB) AllocSpace objects, 20(396KB) LOS objects, 49% free, 4651KB/9302KB, paused 286us,35us total 5.824ms

[EGL_emulation] app_time_stats: avg=47.85ms min=0.87ms max=1331.64ms count=40

[form.mauitester] Explicit concurrent copying GC freed 1267(99KB) AllocSpace objects, 19(380KB) LOS objects, 49% free, 4647KB/9295KB, paused 299us,36us total 6.912ms

[form.mauitester] Explicit concurrent copying GC freed 288(47KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4631KB/9263KB, paused 248us,35us total 4.949ms

[form.mauitester] Explicit concurrent copying GC freed 1220(64KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4631KB/9262KB, paused 321us,37us total 5.399ms

[EGL_emulation] app_time_stats: avg=271.57ms min=4.95ms max=4363.69ms count=17

[form.mauitester] Explicit concurrent copying GC freed 1228(93KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4633KB/9267KB, paused 269us,36us total 5.656ms

[form.mauitester] Explicit concurrent copying GC freed 1320(97KB) AllocSpace objects, 42(840KB) LOS objects, 49% free, 4632KB/9264KB, paused 372us,35us total 6.020ms

[EGL_emulation] app_time_stats: avg=39.59ms min=0.76ms max=533.76ms count=30

[form.mauitester] Explicit concurrent copying GC freed 1932(156KB) AllocSpace objects, 21(416KB) LOS objects, 49% free, 4683KB/9367KB, paused 248us,34us total 5.517ms

[form.mauitester] Explicit concurrent copying GC freed 539(44KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4671KB/9342KB, paused 306us,34us total 5.219ms

[EGL_emulation] app_time_stats: avg=17.39ms min=0.91ms max=333.77ms count=52

[form.mauitester] Explicit concurrent copying GC freed 73(40KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4678KB/9356KB, paused 256us,36us total 5.372ms

[EGL_emulation] app_time_stats: avg=30.34ms min=14.05ms max=384.06ms count=33

[form.mauitester] Explicit concurrent copying GC freed 1109(78KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4679KB/9359KB, paused 262us,170us total 5.510ms

[EGL_emulation] app_time_stats: avg=32.92ms min=13.53ms max=298.98ms count=30

[form.mauitester] Explicit concurrent copying GC freed 1216(78KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4680KB/9361KB, paused 525us,35us total 5.895ms

[EGL_emulation] app_time_stats: avg=50.23ms min=13.64ms max=732.00ms count=33

[form.mauitester] Explicit concurrent copying GC freed 1240(79KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4681KB/9362KB, paused 480us,36us total 5.907ms

[EGL_emulation] app_time_stats: avg=83.12ms min=14.26ms max=1379.96ms count=28

[form.mauitester] Explicit concurrent copying GC freed 1230(80KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4681KB/9362KB, paused 262us,55us total 5.501ms

[form.mauitester] Explicit concurrent copying GC freed 420(50KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4678KB/9356KB, paused 667us,50us total 6.577ms

[form.mauitester] Explicit concurrent copying GC freed 48(33KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4677KB/9354KB, paused 475us,35us total 4.914ms

[EGL_emulation] app_time_stats: avg=48.85ms min=6.28ms max=418.16ms count=23

[form.mauitester] Explicit concurrent copying GC freed 1068(77KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4679KB/9359KB, paused 318us,36us total 5.487ms

[EGL_emulation] app_time_stats: avg=28.92ms min=2.64ms max=417.31ms count=33

[form.mauitester] Explicit concurrent copying GC freed 1189(78KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4680KB/9361KB, paused 333us,34us total 5.442ms

[form.mauitester] Explicit concurrent copying GC freed 1211(64KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4680KB/9361KB, paused 332us,35us total 6.293ms

[EGL_emulation] app_time_stats: avg=283.87ms min=14.65ms max=2964.12ms count=11

[EGL_emulation] app_time_stats: avg=35.71ms min=13.76ms max=413.61ms count=28

[form.mauitester] Explicit concurrent copying GC freed 1332(95KB) AllocSpace objects, 21(420KB) LOS objects, 49% free, 4681KB/9362KB, paused 253us,35us total 7.581ms

[form.mauitester] Explicit concurrent copying GC freed 368(40KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4673KB/9346KB, paused 293us,34us total 5.210ms

[form.mauitester] Explicit concurrent copying GC freed 53(26KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4678KB/9357KB, paused 364us,35us total 5.928ms

[form.mauitester] Explicit concurrent copying GC freed 1086(62KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4679KB/9359KB, paused 259us,35us total 5.308ms

[EGL_emulation] app_time_stats: avg=220.95ms min=0.91ms max=3030.91ms count=14

[form.mauitester] Explicit concurrent copying GC freed 1190(78KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4681KB/9362KB, paused 324us,36us total 5.870ms

[EGL_emulation] app_time_stats: avg=48.14ms min=15.22ms max=415.67ms count=23

[EGL_emulation] app_time_stats: avg=41.05ms min=0.92ms max=666.03ms count=19

[form.mauitester] Explicit concurrent copying GC freed 1306(95KB) AllocSpace objects, 21(416KB) LOS objects, 49% free, 4681KB/9362KB, paused 249us,35us total 5.705ms

[EGL_emulation] app_time_stats: avg=30.87ms min=9.61ms max=415.96ms count=33

[form.mauitester] Explicit concurrent copying GC freed 1255(96KB) AllocSpace objects, 19(380KB) LOS objects, 49% free, 4681KB/9362KB, paused 288us,35us total 6.085ms

[form.mauitester] Explicit concurrent copying GC freed 160(35KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4677KB/9354KB, paused 453us,53us total 5.710ms

[EGL_emulation] app_time_stats: avg=21.20ms min=0.91ms max=399.49ms count=32

[form.mauitester] Explicit concurrent copying GC freed 1158(75KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4681KB/9363KB, paused 258us,36us total 5.407ms

[form.mauitester] Explicit concurrent copying GC freed 1213(64KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4681KB/9363KB, paused 247us,35us total 5.404ms

[form.mauitester] Explicit concurrent copying GC freed 1213(64KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4681KB/9363KB, paused 314us,53us total 6.431ms

[form.mauitester] Explicit concurrent copying GC freed 1213(64KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4681KB/9363KB, paused 327us,35us total 5.780ms

[form.mauitester] Explicit concurrent copying GC freed 375(39KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4673KB/9347KB, paused 249us,34us total 4.804ms

[form.mauitester] Explicit concurrent copying GC freed 175(31KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4679KB/9358KB, paused 313us,35us total 4.960ms

[form.mauitester] Explicit concurrent copying GC freed 1141(61KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4681KB/9363KB, paused 310us,34us total 5.400ms

