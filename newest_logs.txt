> am start -a "android.intent.action.MAIN" -c "android.intent.category.LAUNCHER" -n "com.companyname.core.platform.mauitester/crc6493a3e3c6fc642dc8.MainActivity"
> Starting: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.companyname.core.platform.mauitester/crc6493a3e3c6fc642dc8.MainActivity }

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Private.CoreLib.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Core.Platform.MauiTester.dll

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Mono.Android.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Java.Interop.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.InteropServices.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Collections.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Mono.Android.Runtime.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Threading.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Threading.Thread.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Diagnostics.StackTrace.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Memory.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Reflection.Emit.Lightweight.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Reflection.Emit.ILGeneration.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Reflection.Primitives.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.Essentials.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Core.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.ComponentModel.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.VisualStudio.DesignTools.MobileTapContracts.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/netstandard.dll [External]

Thread started: <Thread Pool> #2

Thread started: .NET TP Gate #3

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.VisualStudio.DesignTools.TapContract.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.DependencyInjection.Abstractions.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Console.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.Controls.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.ObjectModel.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.Controls.Xaml.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Configuration.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Configuration.Abstractions.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Logging.Abstractions.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Logging.Debug.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Private.Uri.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Xml.ReaderWriter.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Private.Xml.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.Loader.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.Graphics.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Linq.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.AppCompat.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.ComponentModel.TypeConverter.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.Google.Android.Material.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Fragment.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Activity.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Lifecycle.ViewModel.Android.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Lifecycle.Common.Jvm.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.SavedState.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.DrawerLayout.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.CustomView.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Navigation.Runtime.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Net.Primitives.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Logging.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Options.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Collections.Concurrent.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.DependencyInjection.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Diagnostics.Tracing.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Text.Encoding.Extensions.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Diagnostics.TraceSource.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.Intrinsics.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Net.Sockets.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Security.Cryptography.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Net.Security.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Win32.Primitives.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Threading.ThreadPool.dll [External]

Thread started: .NET Sockets #4

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Text.RegularExpressions.dll [External]

Thread started:  #5

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Collections.NonGeneric.dll [External]

Thread started: .NET Timer #6

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Diagnostics.DiagnosticSource.dll [External]

Thread started: <Thread Pool> #7

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Numerics.Vectors.dll [External]

[form.mauitester] Late-enabling -Xcheck:jni

[form.mauitester] Using CollectorTypeCC GC.

[form.mauitester] Unexpected CPU variant for x86: x86_64.

[form.mauitester] Known variants: atom, sandybridge, silvermont, goldmont, goldmont-plus, tremont, kabylake, default

[CompatibilityChangeReporter] Compat change id reported: 171979766; UID 10202; state: ENABLED

[CompatibilityChangeReporter] Compat change id reported: 242716250; UID 10202; state: ENABLED

[ApplicationLoaders] Returning zygote-cached class loader: /system_ext/framework/androidx.window.extensions.jar

[ApplicationLoaders] Returning zygote-cached class loader: /system_ext/framework/androidx.window.sidecar.jar

[ziparchive] Unable to open '/data/app/~~zkuzUdoGsuY371DIrC8zNQ==/com.companyname.core.platform.mauitester--WaN5P0gVxx9NSxeuwPw5g==/base.dm': No such file or directory

[ziparchive] Unable to open '/data/app/~~zkuzUdoGsuY371DIrC8zNQ==/com.companyname.core.platform.mauitester--WaN5P0gVxx9NSxeuwPw5g==/base.dm': No such file or directory

[nativeloader] Configuring clns-6 for other apk /data/app/~~zkuzUdoGsuY371DIrC8zNQ==/com.companyname.core.platform.mauitester--WaN5P0gVxx9NSxeuwPw5g==/base.apk. target_sdk_version=35, uses_libraries=, library_path=/data/app/~~zkuzUdoGsuY371DIrC8zNQ==/com.companyname.core.platform.mauitester--WaN5P0gVxx9NSxeuwPw5g==/lib/x86_64:/data/app/~~zkuzUdoGsuY371DIrC8zNQ==/com.companyname.core.platform.mauitester--WaN5P0gVxx9NSxeuwPw5g==/base.apk!/lib/x86_64, permitted_path=/data:/mnt/expand:/data/user/0/com.companyname.core.platform.mauitester

[GraphicsEnvironment] Currently set values for:

[GraphicsEnvironment]   angle_gl_driver_selection_pkgs=[]

[GraphicsEnvironment]   angle_gl_driver_selection_values=[]

[GraphicsEnvironment] ANGLE GameManagerService for com.companyname.core.platform.mauitester: false

[GraphicsEnvironment] com.companyname.core.platform.mauitester is not listed in per-application setting

[GraphicsEnvironment] Neither updatable production driver nor prerelease driver is supported.

[DOTNET] AndroidCryptoNative_InitLibraryOnLoad: jint AndroidCryptoNative_InitLibraryOnLoad(JavaVM *, void *) in /__w/1/s/src/native/libs/System.Security.Cryptography.Native.Android/pal_jni.c

[DOTNET] GetOptionalClassGRef: optional class com/android/org/conscrypt/OpenSSLEngineImpl was not found

[monodroid] Failed to create directory '/data/user/0/com.companyname.core.platform.mauitester/files/.__override__/x86_64'. File exists

[monodroid] Creating public update directory: `/data/user/0/com.companyname.core.platform.mauitester/files/.__override__/x86_64`

[form.mauitester] Attempt to remove non-JNI local reference

[monodroid-debug] Trying to initialize the debugger with options: --debugger-agent=transport=dt_socket,loglevel=0,address=10.0.2.2:54574,embedding=1,timeout=30000

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Core.Platform.MauiTester.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Mono.Android.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Java.Interop.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.InteropServices.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Collections.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Mono.Android.Runtime.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Threading.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Threading.Thread.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Diagnostics.StackTrace.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[form.mauitester] Attempt to remove non-JNI local reference

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Memory.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Reflection.Emit.Lightweight.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Reflection.Emit.ILGeneration.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Reflection.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.Essentials.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Core.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.ComponentModel.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.VisualStudio.DesignTools.MobileTapContracts.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly netstandard.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.VisualStudio.DesignTools.TapContract.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.DependencyInjection.Abstractions.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Console.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.Controls.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.ObjectModel.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.Controls.Xaml.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Configuration.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Configuration.Abstractions.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Logging.Abstractions.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Logging.Debug.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Private.Uri.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Xml.ReaderWriter.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Private.Xml.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.Loader.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.Graphics.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Linq.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.AppCompat.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.ComponentModel.TypeConverter.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.Google.Android.Material.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Fragment.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Activity.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Lifecycle.ViewModel.Android.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Lifecycle.Common.Jvm.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.SavedState.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.DrawerLayout.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.CustomView.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Navigation.Runtime.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Net.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Logging.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Options.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Collections.Concurrent.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.DependencyInjection.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Diagnostics.Tracing.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Text.Encoding.Extensions.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Diagnostics.TraceSource.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.Intrinsics.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Net.Sockets.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Security.Cryptography.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Net.Security.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Win32.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Threading.ThreadPool.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Text.RegularExpressions.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Collections.NonGeneric.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Diagnostics.DiagnosticSource.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Numerics.Vectors.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[form.mauitester] Explicit concurrent copying GC freed 25653(1790KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 2403KB/4806KB, paused 384us,35us total 5.326ms

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.RecyclerView.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.SwipeRefreshLayout.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.CardView.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.RecyclerView.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.SwipeRefreshLayout.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.CardView.dll [External]

[libEGL] loaded /vendor/lib64/egl/libEGL_emulation.so

[libEGL] loaded /vendor/lib64/egl/libGLESv1_CM_emulation.so

[libEGL] loaded /vendor/lib64/egl/libGLESv2_emulation.so

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Loader.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Loader.dll [External]

[AppCompatDelegate] Checking for metadata for AppLocalesMetadataHolderService : Service not found

[monodroid-assembly] open_from_bundles: failed to load bundled assembly _Microsoft.Android.Resource.Designer.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/_Microsoft.Android.Resource.Designer.dll [External]

Thread started: <Thread Pool> #8

Thread started:  #9

Thread started:  #10

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.Serialization.Json.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Private.DataContractSerialization.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.Serialization.Json.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.Serialization.Xml.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Private.DataContractSerialization.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.Serialization.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.Serialization.Xml.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.Serialization.Primitives.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Xml.XmlSerializer.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Xml.XmlSerializer.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Maui.Controls.HotReload.Forms.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Maui.Controls.HotReload.Forms.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.VisualStudio.DesignTools.XamlTapContract.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.VisualStudio.DesignTools.XamlTapContract.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Lifecycle.LiveData.Core.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Lifecycle.LiveData.Core.dll [External]

[form.mauitester] Explicit concurrent copying GC freed 49807(1943KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 2667KB/5335KB, paused 258us,35us total 3.557ms

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.CoordinatorLayout.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.CoordinatorLayout.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Extensions.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Extensions.Primitives.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.Lifecycle.Runtime.Android.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.Kotlin.StdLib.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.KotlinX.Coroutines.Core.Jvm.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.Lifecycle.Runtime.Android.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.Kotlin.StdLib.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.KotlinX.Coroutines.Core.Jvm.dll [External]

[form.mauitester] Accessing hidden method Landroid/view/ViewGroup;->makeOptionalFitsSystemWindows()V (unsupported, reflection, allowed)

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.ViewPager2.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.ViewPager2.dll [External]

[CompatibilityChangeReporter] Compat change id reported: 171228096; UID 10202; state: ENABLED

[TabLayout] MODE_SCROLLABLE + GRAVITY_FILL is not supported, GRAVITY_START will be used instead

[CompatibilityChangeReporter] Compat change id reported: 210923482; UID 10202; state: ENABLED

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Xamarin.AndroidX.ViewPager.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Xamarin.AndroidX.ViewPager.dll [External]

[form.mauitester] Explicit concurrent copying GC freed 4581(779KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 3424KB/6848KB, paused 249us,34us total 3.888ms

[CompatibilityChangeReporter] Compat change id reported: 237531167; UID 10202; state: DISABLED

[OpenGLRenderer] Unknown dataspace 0

[Choreographer] Skipped 151 frames!  The application may be doing too much work on its main thread.

[OpenGLRenderer] Failed to choose config with EGL_SWAP_BEHAVIOR_PRESERVED, retrying without...

[OpenGLRenderer] Failed to initialize 101010-2 format, error = EGL_SUCCESS

[Gralloc4] mapper 4.x is not supported

[OpenGLRenderer] Unable to match the desired swap behavior.

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[MaterialButton] MaterialButton manages its own background to control elevation, shape, color and states. Consider using backgroundTint, shapeAppearance and other attributes where available. A custom background will ignore these attributes and you should consider handling interaction states such as pressed, focused and disabled

[OpenGLRenderer] Davey! duration=2900ms; Flags=1, FrameTimelineVsyncId=13539193, IntendedVsync=39754870436918, Vsync=39757387103484, InputEventId=0, HandleInputStart=39757395457720, AnimationStart=39757395530120, PerformTraversalsStart=39757396002920, DrawStart=39757717130420, FrameDeadline=39754887103584, FrameInterval=39757395110820, FrameStartTime=16666666, SyncQueued=39757742417220, SyncStart=39757742985820, IssueDrawCommandsStart=39757743432020, SwapBuffers=39757759743020, FrameCompleted=39757771432720, DequeueBufferDuration=14500, QueueBufferDuration=214900, GpuCompleted=39757771432720, SwapBuffersCompleted=39757760332520, DisplayPresentTime=34359738536, CommandSubmissionCompleted=39757759743020, 

Thread started: <Thread Pool> #11

Thread started: <Thread Pool> #12

[EGL_emulation] app_time_stats: avg=248.51ms min=23.19ms max=1007.01ms count=5

[form.mauitester] Explicit concurrent copying GC freed 4768(233KB) AllocSpace objects, 18(436KB) LOS objects, 49% free, 4532KB/9064KB, paused 248us,34us total 5.894ms

[form.mauitester] Explicit concurrent copying GC freed 1573(90KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4521KB/9043KB, paused 253us,35us total 5.317ms

[EGL_emulation] app_time_stats: avg=217.02ms min=0.72ms max=3337.88ms count=16

[0:] LOG: [11:08:28.846] Starting Options Import Integration Test validation test...

[0:] LOG: [11:08:28.979] Starting test scenario: Options Import Integration Test

[0:] LOG: [11:08:28.986] Executing Wipe All Data for Testing...

[monodroid-assembly] open_from_bundles: failed to load bundled assembly FSharp.Core.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/FSharp.Core.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Core.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Core.dll

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Reactive.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Reactive.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly Microsoft.Data.Sqlite.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Data.Common.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.ComponentModel.Primitives.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/Microsoft.Data.Sqlite.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Data.Common.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.ComponentModel.Primitives.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly SQLitePCLRaw.core.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Transactions.Local.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/SQLitePCLRaw.core.dll [External]

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Transactions.Local.dll [External]

[form.mauitester] Explicit concurrent copying GC freed 2024(125KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4540KB/9081KB, paused 265us,36us total 6ms

[monodroid-assembly] open_from_bundles: failed to load bundled assembly SQLitePCLRaw.batteries_v2.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/SQLitePCLRaw.batteries_v2.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly SQLitePCLRaw.provider.e_sqlite3.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/SQLitePCLRaw.provider.e_sqlite3.dll [External]

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.Runtime.InteropServices.RuntimeInformation.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.Runtime.InteropServices.RuntimeInformation.dll [External]

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM InvestmentOverviewSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BrokerFinancialSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BankSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BankAccountSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BrokerSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BrokerAccountSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM TickerCurrencySnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM TickerSnapshots

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BankAccountMovements

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BankAccounts

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Banks

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Options

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM DividendDates

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM DividendTaxes

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Dividends

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[EGL_emulation] app_time_stats: avg=16.57ms min=9.63ms max=32.76ms count=60

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Trades

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM TickerSplits

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM TickerPrices

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Tickers

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BrokerMovements

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Currencies

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM BrokerAccounts

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: DELETE FROM Brokers

[0:] [Database.Do.executeNonQuery] Parameters count: 0

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[monodroid-assembly] open_from_bundles: failed to load bundled assembly DynamicData.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/DynamicData.dll [External]

[0:] LOG: [11:08:30.247] Wipe All Data for Testing completed successfully in 00:01.260

[0:] LOG: [11:08:30.253] Executing Initialize MAUI Platform Services...

[0:] LOG: [11:08:30.258] Initialize MAUI Platform Services completed successfully in 00:00.005

[0:] LOG: [11:08:30.264] Executing Overview.InitDatabase()...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[EGL_emulation] app_time_stats: avg=16.59ms min=14.58ms max=20.56ms count=61

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[EGL_emulation] app_time_stats: avg=16.37ms min=10.91ms max=21.21ms count=61

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[EGL_emulation] app_time_stats: avg=16.52ms min=12.33ms max=21.99ms count=60

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[EGL_emulation] app_time_stats: avg=16.49ms min=12.28ms max=20.19ms count=60

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[EGL_emulation] app_time_stats: avg=16.47ms min=13.73ms max=19.50ms count=61

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[EGL_emulation] app_time_stats: avg=16.55ms min=12.11ms max=20.16ms count=60

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[EGL_emulation] app_time_stats: avg=16.53ms min=13.35ms max=18.66ms count=61

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[EGL_emulation] app_time_stats: avg=16.50ms min=12.17ms max=20.55ms count=60

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[EGL_emulation] app_time_stats: avg=16.52ms min=14.54ms max=18.90ms count=60

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[EGL_emulation] app_time_stats: avg=16.48ms min=14.78ms max=19.39ms count=61

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[EGL_emulation] app_time_stats: avg=16.50ms min=13.43ms max=19.44ms count=61

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[EGL_emulation] app_time_stats: avg=16.44ms min=14.67ms max=19.15ms count=61

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[EGL_emulation] app_time_stats: avg=16.51ms min=14.41ms max=18.58ms count=60

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Currencies
        (
            Name, 
            Code, 
            Symbol
        )
        VALUES 
        (
            @Name, 
            @Code, 
            @Symbol
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Brokers
        (
            Name,
            Image,
            SupportedBroker
        )
        VALUES
        (
            @Name,
            @Image,
            @SupportedBroker
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Brokers
        (
            Name,
            Image,
            SupportedBroker
        )
        VALUES
        (
            @Name,
            @Image,
            @SupportedBroker
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Brokers
        (
            Name,
            Image,
            SupportedBroker
        )
        VALUES
        (
            @Name,
            @Image,
            @SupportedBroker
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 4 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Brokers
        (
            Name,
            Image,
            SupportedBroker
        )
        VALUES
        (
            @Name,
            @Image,
            @SupportedBroker
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 4

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 6 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 6

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] LOG: [11:08:43.737] Overview.InitDatabase() completed successfully in 00:13.473

[0:] LOG: [11:08:43.742] Executing Overview.LoadData()...

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO TickerSnapshots
        (
            Date,
            TickerId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO TickerSnapshots
        (
            Date,
            TickerId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[EGL_emulation] app_time_stats: avg=16.55ms min=13.88ms max=18.50ms count=61

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO TickerCurrencySnapshots
        (
            Date,
            TickerId,
            CurrencyId,
            TickerSnapshotId,
            TotalShares,
            Weight,
            CostBasis,
            RealCost,
            Dividends,
            Options,
            TotalIncomes,
            Unrealized,
            Realized,
            Performance,
            LatestPrice,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CurrencyId,
            @TickerSnapshotId,
            @TotalShares,
            @Weight,
            @CostBasis,
            @RealCost,
            @Dividends,
            @Options,
            @TotalIncomes,
            @Unrealized,
            @Realized,
            @Performance,
            @LatestPrice,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO TickerCurrencySnapshots
        (
            Date,
            TickerId,
            CurrencyId,
            TickerSnapshotId,
            TotalShares,
            Weight,
            CostBasis,
            RealCost,
            Dividends,
            Options,
            TotalIncomes,
            Unrealized,
            Realized,
            Performance,
            LatestPrice,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CurrencyId,
            @TickerSnapshotId,
            @TotalShares,
            @Weight,
            @CostBasis,
            @RealCost,
            @Dividends,
            @Options,
            @TotalIncomes,
            @Unrealized,
            @Realized,
            @Performance,
            @LatestPrice,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] LOG: [11:08:44.120] Overview.LoadData() completed successfully in 00:00.378

[0:] LOG: [11:08:44.126] Executing Wait for reactive collections...

[Choreographer] Skipped 909 frames!  The application may be doing too much work on its main thread.

[RippleDrawable] The RippleDrawable.STYLE_PATTERNED animation is not supported for a non-hardware accelerated Canvas. Skipping animation.

[form.mauitester] Explicit concurrent copying GC freed 507(87KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4565KB/9130KB, paused 264us,35us total 5.773ms

[ProfileInstaller] Installing profile for com.companyname.core.platform.mauitester

[0:] LOG: [11:08:44.436] Wait for reactive collections completed successfully in 00:00.311

[0:] LOG: [11:08:44.441] Executing Find Tastytrade Broker...

[0:] LOG: [11:08:44.447] Find Tastytrade Broker completed successfully in 00:00.006

[0:] LOG: [11:08:44.452] Executing Execute Options Import Integration Test...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccounts
        (
            BrokerId,
            AccountNumber,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @BrokerId,
            @AccountNumber,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccounts
        (
            BrokerId,
            AccountNumber,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @BrokerId,
            @AccountNumber,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialDefault] Creating default snapshot for BrokerAccountId: 1, Date: 2025-09-27T23:59:59

[0:] [BrokerFinancialDefault] Step 1: Getting default currency...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 1: Getting preference currency...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 2: Preference currency = USD

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 3: Calling CurrencyExtensions.Do.getByCode...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 4: CurrencyExtensions.Do.getByCode completed

[0:] [SnapshotManagerUtils] getDefaultCurrency - Success: Found currency ID = 141

[0:] [BrokerFinancialDefault] Step 2: Currency ID obtained: 141

[0:] [BrokerFinancialDefault] Step 3: Creating base snapshot...

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialDefault] Step 4: Base snapshot created with ID: 0

[0:] [BrokerFinancialDefault] Step 5: Creating snapshot object...

[0:] [BrokerFinancialDefault] Step 6: Snapshot object created successfully

[0:] [BrokerFinancialDefault] About to save default snapshot with CurrencyId: 141, Deposited: 0

[0:] [BrokerFinancialDefault] Step 7: Calling snapshot.save()...

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 0, MovementCounter: 0

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 0, MovementCounter: 0

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialDefault] Step 8: snapshot.save() completed successfully

[0:] [BrokerFinancialDefault] Default snapshot saved successfully

[0:] [BrokerAccountSnapshotLoader] Loading financial snapshots for BrokerAccountId: 1, SnapshotDate: 2025-09-27T23:59:59

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[EGL_emulation] app_time_stats: avg=16.74ms min=14.37ms max=33.19ms count=59

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerAccountSnapshotLoader] Found 1 financial snapshots

[0:] [DatabaseToModels] Converting broker account snapshot - BrokerAccountId: 1, FinancialSnapshots count: 1

[0:] [DatabaseToModels] Converting 1 financial snapshots for BrokerAccount

[0:] [DatabaseToModels] Financial snapshot - Deposited: 0.0, MovementCounter: 0

[0:] [BrokerFinancialDefault] Creating default snapshot for BrokerAccountId: 1, Date: 2025-09-27T23:59:59

[0:] [BrokerFinancialDefault] Step 1: Getting default currency...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 1: Getting preference currency...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 2: Preference currency = USD

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 3: Calling CurrencyExtensions.Do.getByCode...

[0:] [SnapshotManagerUtils] getDefaultCurrency - Step 4: CurrencyExtensions.Do.getByCode completed

[0:] [SnapshotManagerUtils] getDefaultCurrency - Success: Found currency ID = 141

[0:] [BrokerFinancialDefault] Step 2: Currency ID obtained: 141

[0:] [BrokerFinancialDefault] Step 3: Creating base snapshot...

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialDefault] Step 4: Base snapshot created with ID: 0

[0:] [BrokerFinancialDefault] Step 5: Creating snapshot object...

[0:] [BrokerFinancialDefault] Step 6: Snapshot object created successfully

[0:] [BrokerFinancialDefault] About to save default snapshot with CurrencyId: 141, Deposited: 0

[0:] [BrokerFinancialDefault] Step 7: Calling snapshot.save()...

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 0, MovementCounter: 0

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 0, MovementCounter: 0

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialDefault] Step 8: snapshot.save() completed successfully

[0:] [BrokerFinancialDefault] Default snapshot saved successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerSnapshots
        (
            Date,
            BrokerId,
            AccountCount,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @AccountCount,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 6 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerSnapshots
        (
            Date,
            BrokerId,
            AccountCount,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @AccountCount,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 6

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[monodroid-assembly] open_from_bundles: failed to load bundled assembly System.IO.Compression.ZipFile.dll

[monodroid-assembly] open_from_bundles: the assembly might have been uploaded to the device with FastDev instead

Loaded assembly: /data/data/com.companyname.core.platform.mauitester/files/.__override__/x86_64/System.IO.Compression.ZipFile.dll [External]

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 6 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 6

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 6 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 6

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[EGL_emulation] app_time_stats: avg=16.39ms min=13.27ms max=18.32ms count=61

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 6 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Tickers
        (
            Symbol,
            Image,
            Name,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Symbol,
            @Image,
            @Name,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 6

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 15 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 15

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO Options
        (
            TimeStamp,
            ExpirationDate,
            Premium,
            NetPremium,
            TickerId,
            BrokerAccountId,
            CurrencyId,
            OptionType,
            Code,
            Strike,
            Commissions,
            Fees,
            IsOpen,
            ClosedWith,
            Multiplier,
            Notes,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @ExpirationDate,
            @Premium,
            @NetPremium,
            @TickerId,
            @BrokerAccountId,
            @CurrencyId,
            @OptionType,
            @Code,
            @Strike,
            @Commissions,
            @Fees,
            @IsOpen,
            @ClosedWith,
            @Multiplier,
            @Notes,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 15 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 15

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 15 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 15

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[EGL_emulation] app_time_stats: avg=16.48ms min=13.83ms max=19.24ms count=60

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 15 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerMovements
        (
            TimeStamp,
            Amount,
            CurrencyId,
            BrokerAccountId,
            Commissions,
            Fees,
            MovementType,
            Notes,
            FromCurrencyId,
            AmountChanged,
            TickerId,
            Quantity,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @TimeStamp,
            @Amount,
            @CurrencyId,
            @BrokerAccountId,
            @Commissions,
            @Fees,
            @MovementType,
            @Notes,
            @FromCurrencyId,
            @AmountChanged,
            @TickerId,
            @Quantity,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 15

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '0.02'

[0:] [DataReaderExtensions] Parsed decimal value: 0.02

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 1, Type: Fee, Amount: 0.02, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '844.56'

[0:] [DataReaderExtensions] Parsed decimal value: 844.56

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 2, Type: Deposit, Amount: 844.56, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '24.23'

[0:] [DataReaderExtensions] Parsed decimal value: 24.23

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 3, Type: Deposit, Amount: 24.23, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 4, Type: Deposit, Amount: 10.0, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '16.0'

[0:] [DataReaderExtensions] Parsed decimal value: 16.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '14.86'

[0:] [DataReaderExtensions] Parsed decimal value: 14.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '6.5'

[0:] [DataReaderExtensions] Parsed decimal value: 6.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '4.86'

[0:] [DataReaderExtensions] Parsed decimal value: 4.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.0'

[0:] [DataReaderExtensions] Parsed decimal value: 21.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '9.0'

[0:] [DataReaderExtensions] Parsed decimal value: 9.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '8.87'

[0:] [DataReaderExtensions] Parsed decimal value: 8.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.5'

[0:] [DataReaderExtensions] Parsed decimal value: 21.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '17.0'

[0:] [DataReaderExtensions] Parsed decimal value: 17.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '15.86'

[0:] [DataReaderExtensions] Parsed decimal value: 15.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '17.0'

[0:] [DataReaderExtensions] Parsed decimal value: 17.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '16.87'

[0:] [DataReaderExtensions] Parsed decimal value: 16.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '0.86'

[0:] [DataReaderExtensions] Parsed decimal value: 0.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '8.0'

[0:] [DataReaderExtensions] Parsed decimal value: 8.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '7.87'

[0:] [DataReaderExtensions] Parsed decimal value: 7.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.5'

[0:] [DataReaderExtensions] Parsed decimal value: 4.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '11.0'

[0:] [DataReaderExtensions] Parsed decimal value: 11.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '9.87'

[0:] [DataReaderExtensions] Parsed decimal value: 9.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.0'

[0:] [DataReaderExtensions] Parsed decimal value: 21.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '19.0'

[0:] [DataReaderExtensions] Parsed decimal value: 19.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '17.86'

[0:] [DataReaderExtensions] Parsed decimal value: 17.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.5'

[0:] [DataReaderExtensions] Parsed decimal value: 21.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '19.0'

[0:] [DataReaderExtensions] Parsed decimal value: 19.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '17.86'

[0:] [DataReaderExtensions] Parsed decimal value: 17.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.5'

[0:] [DataReaderExtensions] Parsed decimal value: 4.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '2.87'

[0:] [DataReaderExtensions] Parsed decimal value: 2.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '35.0'

[0:] [DataReaderExtensions] Parsed decimal value: 35.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [BrokerAccountSnapshotManager] Entering handleBrokerAccountChange - BrokerAccountId: 1, Date: 2024-04-22T22:00:00

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-22T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-22T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerAccountSnapshots
        (
            Date,
            BrokerAccountId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerAccountId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerAccountSnapshotManager] Snapshot retrieved/created - Id: 2, Date: 2024-04-22T23:59:59

[0:] [BrokerAccountSnapshotManager] Movement retrieval date: 2024-04-22T00:00:01

[0:] [BrokerAccountSnapshotManager] getAllMovementsFromDate - BrokerAccountId: 1, Date: 2024-04-22T00:00:01

[0:] [BrokerAccountSnapshotManager] Using date-based filtering to match movements on the same date

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[EGL_emulation] app_time_stats: avg=16.40ms min=13.27ms max=18.49ms count=60

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 4, Type: Deposit, Amount: 10.0, BrokerAccountId: 1

[0:] [BrokerAccountSnapshotManager] BrokerMovements loaded: 1

[0:] [BrokerAccountSnapshotManager] Trades loaded: 0

[0:] [BrokerAccountSnapshotManager] Dividends loaded: 0

[0:] [BrokerAccountSnapshotManager] DividendTaxes loaded: 0

[0:] [BrokerAccountSnapshotManager] OptionTrades loaded: 0

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 1, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 1

[0:] [BrokerAccountMovementData] Movement for currency 141 - ID: 4, Type: Deposit, Amount: 10.0

[0:] [BrokerAccountSnapshotManager] Movements loaded - HasMovements: True

[0:] [BrokerAccountSnapshotManager] Future snapshots loaded - Count: 1

[0:] [BrokerAccountSnapshotManager] Date analysis - DatesWithMovements: 1, DatesWithSnapshots: 1, MissingSnapshotDates: 1

[0:] [BrokerAccountSnapshotManager] Decision: Cascade update with missing snapshots creation

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 1, UniqueCurrencies: 1

[0:] [BrokerAccountMovementData] Currency 141 - BrokerMovements: 1

[0:] [BrokerAccountMovementData] Movement for currency 141 - ID: 4, Type: Deposit, Amount: 10.0

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2024-04-22T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: True, TotalMovementCount: 1, UniqueCurrencies: 1

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 2

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 4/22/2024 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 0

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 0

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: [141]

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: []

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 1

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 0

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: True

[0:] [BrokerFinancialSnapshotManager] Currency 141 has 1 broker movements

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: True, HasPrevious: False, HasExisting: False

[0:] [BrokerFinancialSnapshotManager] SCENARIO B: New movements, no previous snapshot, no existing snapshot

[0:] [BrokerFinancialsMetricsFromMovements] Starting calculate for currency 141

[0:] [BrokerFinancialsMetricsFromMovements] Input movements - BrokerMovements: 1, Trades: 0, Dividends: 0

[0:] [FinancialCalculations] calculateFinancialSummary - Processing 1 movements, CurrencyFilter: 

[0:] [FinancialCalculations] calculateTotalDeposited - Processing 1 total movements

[0:] [FinancialCalculations] Movement ID 4, Type: Deposit, Amount: 10.0

[0:] [FinancialCalculations] Found 1 deposit movements

[0:] [FinancialCalculations] Total deposited amount calculated: 10.0

[0:] [FinancialCalculations] Financial summary calculated - TotalDeposited: 10.0, MovementCount: 1

[0:] [BrokerFinancialsMetricsFromMovements] BrokerMovement summary - TotalDeposited: 10.0, TotalWithdrawn: 0

[0:] [BrokerFinancialsMetricsFromMovements] Conversion impact: 0

[0:] [BrokerFinancialsMetricsFromMovements] After conversion adjustment - Deposited: 10.0, Withdrawn: 0

[0:] [OptionTradeCalculations] calculateRealizedGains called with currentDate: 2024-04-22

[0:] [OptionTradeCalculations] Total realized gains calculated: $0.00

[0:] [BrokerFinancialsMetricsFromMovements] Final calculated metrics - Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Starting create for currency 141, date 2024-04-22T23:59:59

[0:] [BrokerFinancialCumulativeFinancial] Calculated metrics - Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialCumulativeFinancial] Has previous snapshot: False

[0:] [BrokerFinancialCumulativeFinancial] No previous snapshot, using calculated Deposited: 10.0

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2024-04-22T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2024-04-22T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [BrokerFinancialCumulativeFinancial] Created snapshot to save - Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 0, CurrencyId: 141, Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 10.0, MovementCounter: 1

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO BrokerFinancialSnapshots
        (
            Date,
            BrokerId,
            BrokerAccountId,
            CurrencyId,
            MovementCounter,
            BrokerSnapshotId,
            BrokerAccountSnapshotId,
            RealizedGains,
            RealizedPercentage,
            UnrealizedGains,
            UnrealizedGainsPercentage,
            Invested,
            Commissions,
            Fees,
            Deposited,
            Withdrawn,
            DividendsReceived,
            OptionsIncome,
            OtherIncome,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @BrokerId,
            @BrokerAccountId,
            @CurrencyId,
            @MovementCounter,
            @BrokerSnapshotId,
            @BrokerAccountSnapshotId,
            @RealizedGains,
            @RealizedPercentage,
            @UnrealizedGains,
            @UnrealizedGainsPercentage,
            @Invested,
            @Commissions,
            @Fees,
            @Deposited,
            @Withdrawn,
            @DividendsReceived,
            @OptionsIncome,
            @OtherIncome,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialCumulativeFinancial] Snapshot saved successfully with ID: 0

[0:] [BrokerAccountMovementData] Creating movement data - Total BrokerMovements: 0, UniqueCurrencies: 0

[0:] [BrokerFinancialSnapshotManager] Starting brokerAccountOneDayUpdate - BrokerAccountId: 1, Date: 2025-09-27T23:59:59

[0:] [BrokerFinancialSnapshotManager] MovementData - HasMovements: False, TotalMovementCount: 0, UniqueCurrencies: 0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[EGL_emulation] app_time_stats: avg=12.05ms min=1.23ms max=40.19ms count=60

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerFinancialSnapshotManager] All previous snapshots loaded: 3

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Previous snapshot: Date=2025-09-27T23:59:59, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Target date for comparison: 9/27/2025 11:59:59 PM

[0:] [BrokerFinancialSnapshotManager] Filtering snapshots before target date...

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=4/22/2024 11:59:59 PM, IsBeforeTarget=True, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Snapshot Date=9/27/2025 11:59:59 PM, IsBeforeTarget=False, CurrencyId=141, Deposited=0.0

[0:] [BrokerFinancialSnapshotManager] Filtered snapshots count: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency 141 with 1 snapshots

[0:] [BrokerFinancialSnapshotManager] Latest snapshot for currency 141: Date=4/22/2024 11:59:59 PM, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Relevant previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] Relevant previous: Date=2024-04-22T23:59:59, CurrencyId=141, Deposited=10.0

[0:] [BrokerFinancialSnapshotManager] Currencies with movements: []

[0:] [BrokerFinancialSnapshotManager] Currencies with previous snapshots: [141]

[0:] [BrokerFinancialSnapshotManager] All relevant currencies to process: [141]

[0:] [BrokerFinancialSnapshotManager] Currency processing summary:

[0:] [BrokerFinancialSnapshotManager] - Currencies with movements: 0

[0:] [BrokerFinancialSnapshotManager] - Currencies with previous snapshots: 1

[0:] [BrokerFinancialSnapshotManager] - Total currencies to process: 1

[0:] [BrokerFinancialSnapshotManager] Processing currency ID: 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 movement data - Found: False

[0:] [BrokerFinancialSnapshotManager] No movement data found for currency 141

[0:] [BrokerFinancialSnapshotManager] Currency 141 - HasMovements: False, HasPrevious: True, HasExisting: True

[0:] [BrokerFinancialSnapshotManager] SCENARIO G: No movements, has previous snapshot, has existing snapshot

[0:] [BrokerFinancialSnapshotManager] Previous snapshot - Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialSnapshotManager] Existing snapshot - Deposited: 0.0, MovementCounter: 0

[0:] [BrokerFinancialValidateAndCorrect] Starting snapshotConsistency check

[0:] [BrokerFinancialValidateAndCorrect] Previous: Deposited=10.0, MovementCounter=1

[0:] [BrokerFinancialValidateAndCorrect] Existing: Deposited=0.0, MovementCounter=0

[0:] [BrokerFinancialValidateAndCorrect] Snapshots differ - applying correction

[0:] [BrokerFinancialSnapshotExtensions] Saving financial snapshot - ID: 2, CurrencyId: 141, Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialSnapshotExtensions] About to call Database.Do.saveEntity...

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 2

[0:] [Database.Do.saveEntity] Step 4b: Using UPDATE SQL (existing entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        UPDATE BrokerFinancialSnapshots
        SET
            Date = @Date,
            BrokerId = @BrokerId,
            BrokerAccountId = @BrokerAccountId,
            CurrencyId = @CurrencyId,
            MovementCounter = @MovementCounter,
            BrokerSnapshotId = @BrokerSnapshotId,
            BrokerAccountSnapshotId = @BrokerAccountSnapshotId,
            RealizedGains = @RealizedGains,
            RealizedPercentage = @RealizedPercentage,
            UnrealizedGains = @UnrealizedGains,
            UnrealizedGainsPercentage = @UnrealizedGainsPercentage,
            Invested = @Invested,
            Commissions = @Commissions,
            Fees = @Fees,
            Deposited = @Deposited,
            Withdrawn = @Withdrawn,
            DividendsReceived = @DividendsReceived,
            OptionsIncome = @OptionsIncome,
            OtherIncome = @OtherIncome,
            OpenTrades = @OpenTrades,
            CreatedAt = @CreatedAt,
            UpdatedAt = @UpdatedAt
        WHERE
            Id = @Id
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [BrokerFinancialSnapshotExtensions] Filling database command with snapshot values - Deposited: 10.0, MovementCounter: 1

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 23 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        UPDATE BrokerFinancialSnapshots
        SET
            Date = @Date,
            BrokerId = @BrokerId,
            BrokerAccountId = @BrokerAccountId,
            CurrencyId = @CurrencyId,
            MovementCounter = @MovementCounter,
            BrokerSnapshotId = @BrokerSnapshotId,
            BrokerAccountSnapshotId = @BrokerAccountSnapshotId,
            RealizedGains = @RealizedGains,
            RealizedPercentage = @RealizedPercentage,
            UnrealizedGains = @UnrealizedGains,
            UnrealizedGainsPercentage = @UnrealizedGainsPercentage,
            Invested = @Invested,
            Commissions = @Commissions,
            Fees = @Fees,
            Deposited = @Deposited,
            Withdrawn = @Withdrawn,
            DividendsReceived = @DividendsReceived,
            OptionsIncome = @OptionsIncome,
            OtherIncome = @OtherIncome,
            OpenTrades = @OpenTrades,
            CreatedAt = @CreatedAt,
            UpdatedAt = @UpdatedAt
        WHERE
            Id = @Id
        

[0:] [Database.Do.executeNonQuery] Parameters count: 23

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [BrokerFinancialSnapshotExtensions] Database.Do.saveEntity completed successfully

[0:] [BrokerFinancialValidateAndCorrect] Corrected snapshot saved - Deposited: 10.0, MovementCounter: 1

[0:] [BrokerFinancialSnapshotManager] SCENARIO G completed - snapshot consistency validation/correction applied

[0:] [BrokerAccountSnapshotManager] Exiting handleBrokerAccountChange - BrokerAccountId: 1

[0:] [BrokerAccountSnapshotLoader] Loading financial snapshots for BrokerAccountId: 1, SnapshotDate: 2025-09-27T23:59:59

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerAccountSnapshotLoader] Found 2 financial snapshots

[0:] [DatabaseToModels] Converting broker account snapshot - BrokerAccountId: 1, FinancialSnapshots count: 2

[0:] [DatabaseToModels] Converting 2 financial snapshots for BrokerAccount

[0:] [DatabaseToModels] Financial snapshot - Deposited: 10.0, MovementCounter: 1

[0:] [DatabaseToModels] Financial snapshot - Deposited: 0.0, MovementCounter: 0

[0:] [BrokerAccountSnapshotLoader] Loading financial snapshots for BrokerAccountId: 1, SnapshotDate: 2025-09-27T23:59:59

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column RealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column UnrealizedGains - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Invested - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Deposited - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Withdrawn - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column DividendsReceived - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OptionsIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column OtherIncome - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerAccountSnapshotLoader] Found 2 financial snapshots

[0:] [DatabaseToModels] Converting broker account snapshot - BrokerAccountId: 1, FinancialSnapshots count: 2

[0:] [DatabaseToModels] Converting 2 financial snapshots for BrokerAccount

[0:] [DatabaseToModels] Financial snapshot - Deposited: 10.0, MovementCounter: 1

[0:] [DatabaseToModels] Financial snapshot - Deposited: 0.0, MovementCounter: 0

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO TickerSnapshots
        (
            Date,
            TickerId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[EGL_emulation] app_time_stats: avg=8.02ms min=0.91ms max=76.79ms count=54

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO TickerSnapshots
        (
            Date,
            TickerId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO TickerSnapshots
        (
            Date,
            TickerId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO TickerSnapshots
        (
            Date,
            TickerId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO TickerSnapshots
        (
            Date,
            TickerId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 5 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO TickerSnapshots
        (
            Date,
            TickerId,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Parameters count: 5

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO TickerCurrencySnapshots
        (
            Date,
            TickerId,
            CurrencyId,
            TickerSnapshotId,
            TotalShares,
            Weight,
            CostBasis,
            RealCost,
            Dividends,
            Options,
            TotalIncomes,
            Unrealized,
            Realized,
            Performance,
            LatestPrice,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CurrencyId,
            @TickerSnapshotId,
            @TotalShares,
            @Weight,
            @CostBasis,
            @RealCost,
            @Dividends,
            @Options,
            @TotalIncomes,
            @Unrealized,
            @Realized,
            @Performance,
            @LatestPrice,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO TickerCurrencySnapshots
        (
            Date,
            TickerId,
            CurrencyId,
            TickerSnapshotId,
            TotalShares,
            Weight,
            CostBasis,
            RealCost,
            Dividends,
            Options,
            TotalIncomes,
            Unrealized,
            Realized,
            Performance,
            LatestPrice,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CurrencyId,
            @TickerSnapshotId,
            @TotalShares,
            @Weight,
            @CostBasis,
            @RealCost,
            @Dividends,
            @Options,
            @TotalIncomes,
            @Unrealized,
            @Realized,
            @Performance,
            @LatestPrice,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO TickerCurrencySnapshots
        (
            Date,
            TickerId,
            CurrencyId,
            TickerSnapshotId,
            TotalShares,
            Weight,
            CostBasis,
            RealCost,
            Dividends,
            Options,
            TotalIncomes,
            Unrealized,
            Realized,
            Performance,
            LatestPrice,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CurrencyId,
            @TickerSnapshotId,
            @TotalShares,
            @Weight,
            @CostBasis,
            @RealCost,
            @Dividends,
            @Options,
            @TotalIncomes,
            @Unrealized,
            @Realized,
            @Performance,
            @LatestPrice,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO TickerCurrencySnapshots
        (
            Date,
            TickerId,
            CurrencyId,
            TickerSnapshotId,
            TotalShares,
            Weight,
            CostBasis,
            RealCost,
            Dividends,
            Options,
            TotalIncomes,
            Unrealized,
            Realized,
            Performance,
            LatestPrice,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CurrencyId,
            @TickerSnapshotId,
            @TotalShares,
            @Weight,
            @CostBasis,
            @RealCost,
            @Dividends,
            @Options,
            @TotalIncomes,
            @Unrealized,
            @Realized,
            @Performance,
            @LatestPrice,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 1: Creating base snapshot for date 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 2: Normalized date = 2025-09-27T23:59:59

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 3: Created audit entity

[0:] [SnapshotManagerUtils] createBaseSnapshot - Step 4: Base snapshot created successfully with ID = 0

[0:] [Database.Do.saveEntity] Step 1: Creating database command...

[0:] [Database.Do.saveEntity] Step 2: Command created successfully

[0:] [Database.Do.saveEntity] Step 3: Setting CommandText based on entity ID = 0

[0:] [Database.Do.saveEntity] Step 4a: Using INSERT SQL (new entity)

[0:] [Database.Do.saveEntity] Step 5: CommandText set to: 
        INSERT INTO TickerCurrencySnapshots
        (
            Date,
            TickerId,
            CurrencyId,
            TickerSnapshotId,
            TotalShares,
            Weight,
            CostBasis,
            RealCost,
            Dividends,
            Options,
            TotalIncomes,
            Unrealized,
            Realized,
            Performance,
            LatestPrice,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CurrencyId,
            @TickerSnapshotId,
            @TotalShares,
            @Weight,
            @CostBasis,
            @RealCost,
            @Dividends,
            @Options,
            @TotalIncomes,
            @Unrealized,
            @Realized,
            @Performance,
            @LatestPrice,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.saveEntity] Step 6: Calling fill method to populate parameters...

[0:] [Database.Do.saveEntity] Step 7: Fill method completed, command has 19 parameters

[0:] [Database.Do.saveEntity] Step 8: Calling executeNonQuery...

[0:] [Database.Do.executeNonQuery] Step 1: Connecting to database...

[0:] [Database.Do.executeNonQuery] Step 2: Database connected, executing command...

[0:] [Database.Do.executeNonQuery] CommandText: 
        INSERT INTO TickerCurrencySnapshots
        (
            Date,
            TickerId,
            CurrencyId,
            TickerSnapshotId,
            TotalShares,
            Weight,
            CostBasis,
            RealCost,
            Dividends,
            Options,
            TotalIncomes,
            Unrealized,
            Realized,
            Performance,
            LatestPrice,
            OpenTrades,
            CreatedAt,
            UpdatedAt
        )
        VALUES
        (
            @Date,
            @TickerId,
            @CurrencyId,
            @TickerSnapshotId,
            @TotalShares,
            @Weight,
            @CostBasis,
            @RealCost,
            @Dividends,
            @Options,
            @TotalIncomes,
            @Unrealized,
            @Realized,
            @Performance,
            @LatestPrice,
            @OpenTrades,
            @CreatedAt,
            @UpdatedAt
        )
        

[0:] [Database.Do.executeNonQuery] Parameters count: 19

[0:] [Database.Do.executeNonQuery] Step 3: Command executed successfully

[0:] [Database.Do.executeNonQuery] Step 4: Disposing command...

[0:] [Database.Do.executeNonQuery] Step 5: Command disposed successfully

[0:] [Database.Do.saveEntity] Step 9: executeNonQuery completed successfully

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '0.02'

[0:] [DataReaderExtensions] Parsed decimal value: 0.02

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 1, Type: Fee, Amount: 0.02, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '844.56'

[0:] [DataReaderExtensions] Parsed decimal value: 844.56

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 2, Type: Deposit, Amount: 844.56, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '24.23'

[0:] [DataReaderExtensions] Parsed decimal value: 24.23

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 3, Type: Deposit, Amount: 24.23, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Amount - Raw text value: '10.0'

[0:] [DataReaderExtensions] Parsed decimal value: 10.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [BrokerMovementExtensions] Read movement - ID: 4, Type: Deposit, Amount: 10.0, BrokerAccountId: 1

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '16.0'

[0:] [DataReaderExtensions] Parsed decimal value: 16.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '14.86'

[0:] [DataReaderExtensions] Parsed decimal value: 14.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '6.5'

[0:] [DataReaderExtensions] Parsed decimal value: 6.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '5.0'

[0:] [DataReaderExtensions] Parsed decimal value: 5.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '4.86'

[0:] [DataReaderExtensions] Parsed decimal value: 4.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.0'

[0:] [DataReaderExtensions] Parsed decimal value: 21.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '9.0'

[0:] [DataReaderExtensions] Parsed decimal value: 9.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '8.87'

[0:] [DataReaderExtensions] Parsed decimal value: 8.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.5'

[0:] [DataReaderExtensions] Parsed decimal value: 21.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '17.0'

[0:] [DataReaderExtensions] Parsed decimal value: 17.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '15.86'

[0:] [DataReaderExtensions] Parsed decimal value: 15.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '17.0'

[0:] [DataReaderExtensions] Parsed decimal value: 17.0

[EGL_emulation] app_time_stats: avg=14.70ms min=0.98ms max=23.24ms count=60

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '16.87'

[0:] [DataReaderExtensions] Parsed decimal value: 16.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '0.86'

[0:] [DataReaderExtensions] Parsed decimal value: 0.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '8.0'

[0:] [DataReaderExtensions] Parsed decimal value: 8.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '7.87'

[0:] [DataReaderExtensions] Parsed decimal value: 7.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.5'

[0:] [DataReaderExtensions] Parsed decimal value: 4.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '0.0'

[0:] [DataReaderExtensions] Parsed decimal value: 0.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '11.0'

[0:] [DataReaderExtensions] Parsed decimal value: 11.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '9.87'

[0:] [DataReaderExtensions] Parsed decimal value: 9.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.0'

[0:] [DataReaderExtensions] Parsed decimal value: 21.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '19.0'

[0:] [DataReaderExtensions] Parsed decimal value: 19.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '17.86'

[0:] [DataReaderExtensions] Parsed decimal value: 17.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '21.5'

[0:] [DataReaderExtensions] Parsed decimal value: 21.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '19.0'

[0:] [DataReaderExtensions] Parsed decimal value: 19.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '17.86'

[0:] [DataReaderExtensions] Parsed decimal value: 17.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.5'

[0:] [DataReaderExtensions] Parsed decimal value: 4.5

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '2.87'

[0:] [DataReaderExtensions] Parsed decimal value: 2.87

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '4.0'

[0:] [DataReaderExtensions] Parsed decimal value: 4.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.13'

[0:] [DataReaderExtensions] Parsed decimal value: 0.13

[0:] [DataReaderExtensions] Reading Money from column Premium - Raw text value: '35.0'

[0:] [DataReaderExtensions] Parsed decimal value: 35.0

[0:] [DataReaderExtensions] Reading Money from column NetPremium - Raw text value: '33.86'

[0:] [DataReaderExtensions] Parsed decimal value: 33.86

[0:] [DataReaderExtensions] Reading Money from column Strike - Raw text value: '7.0'

[0:] [DataReaderExtensions] Parsed decimal value: 7.0

[0:] [DataReaderExtensions] Reading Money from column Commissions - Raw text value: '1.0'

[0:] [DataReaderExtensions] Parsed decimal value: 1.0

[0:] [DataReaderExtensions] Reading Money from column Fees - Raw text value: '0.14'

[0:] [DataReaderExtensions] Parsed decimal value: 0.14

[Choreographer] Skipped 419 frames!  The application may be doing too much work on its main thread.

[form.mauitester] Explicit concurrent copying GC freed 1114(155KB) AllocSpace objects, 12(240KB) LOS objects, 49% free, 4552KB/9105KB, paused 257us,36us total 5.978ms

[EGL_emulation] app_time_stats: avg=1.26ms min=0.80ms max=4.78ms count=57

[0:] ERROR: [11:08:52.452] ERROR: Execute Options Import Integration Test failed in 00:08.000: Financial validation failed - check expected vs actual values

[0:] LOG: [11:08:52.465] Options Import Integration Test test execution completed. Overall result: False

[form.mauitester] Explicit concurrent copying GC freed 1358(152KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4592KB/9185KB, paused 332us,35us total 5.414ms

[form.mauitester] Explicit concurrent copying GC freed 889(121KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4631KB/9262KB, paused 321us,48us total 6.213ms

[form.mauitester] Explicit concurrent copying GC freed 340(42KB) AllocSpace objects, 0(0B) LOS objects, 49% free, 4621KB/9242KB, paused 259us,34us total 5.573ms

[form.mauitester] Explicit concurrent copying GC freed 1534(179KB) AllocSpace objects, 20(396KB) LOS objects, 49% free, 4617KB/9234KB, paused 369us,34us total 6.147ms

[EGL_emulation] app_time_stats: avg=42.23ms min=0.82ms max=1308.97ms count=39

[form.mauitester] Explicit concurrent copying GC freed 1371(142KB) AllocSpace objects, 19(380KB) LOS objects, 49% free, 4618KB/9236KB, paused 271us,118us total 5.562ms

