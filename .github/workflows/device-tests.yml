---
name: Device Tests

on:
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - '.github/workflows/device-tests.yml'
  push:
    branches: [main]
    paths:
      - 'src/**'
      - '.github/workflows/device-tests.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # Core tests (lightweight, runs on all platforms)
  core-tests:
    name: Core Logic Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore src/Tests/Core.Tests/Core.Tests.fsproj

      - name: Build Core project
        run: dotnet build src/Core/Core.fsproj --configuration Release --no-restore

      - name: Build Core.Tests
        run: dotnet build src/Tests/Core.Tests/Core.Tests.fsproj --configuration Release --no-restore

      - name: Run Core.Tests
        run: |
          dotnet test src/Tests/Core.Tests/Core.Tests.fsproj \
            --configuration Release --no-build --verbosity normal \
            --logger "trx;LogFileName=core-tests-results.trx" \
            --logger "junit;LogFileName=core-tests-results.xml"

      - name: Publish Core Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Core Logic Tests Results
          path: '**/core-tests-results.xml'
          reporter: java-junit
          fail-on-error: false

  # Build integration tests
  build-integration:
    name: Build Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install MAUI Android Workload
        run: dotnet workload install maui-android
        timeout-minutes: 5

      - name: Restore dependencies
        run: |
          dotnet restore src/Tests/Build.IntegrationTests/Build.IntegrationTests.csproj

      - name: Build Build.IntegrationTests
        run: |
          dotnet build src/Tests/Build.IntegrationTests/Build.IntegrationTests.csproj \
            --configuration Release --no-restore

      - name: Run Build Integration Tests
        run: |
          dotnet test src/Tests/Build.IntegrationTests/Build.IntegrationTests.csproj \
            --configuration Release --no-build --verbosity normal \
            --logger "trx;LogFileName=build-tests-results.trx" \
            --logger "junit;LogFileName=build-tests-results.xml"

      - name: Publish Build Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Build Integration Tests Results
          path: '**/build-tests-results.xml'
          reporter: java-junit
          fail-on-error: false

  # Device tests matrix (platform-specific)
  device-tests:
    name: Device Tests (${{ matrix.platform }})
    needs: [core-tests]
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
            target: net9.0-android
          - platform: windows
            os: windows-latest
            target: net9.0-windows10.0.19041.0
          - platform: ios
            os: macos-latest
            target: net9.0-ios
          - platform: maccatalyst
            os: macos-latest
            target: net9.0-maccatalyst
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install MAUI workloads (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: dotnet workload install maui-android
        timeout-minutes: 5

      - name: Install MAUI workloads (macOS)
        if: matrix.os == 'macos-latest'
        run: dotnet workload install maui-android maui-ios maui-maccatalyst
        timeout-minutes: 10

      - name: Install MAUI workloads (Windows)
        if: matrix.os == 'windows-latest'
        run: dotnet workload install maui-android maui-windows
        timeout-minutes: 10

      - name: Restore Core dependencies
        run: dotnet restore src/Core/Core.fsproj

      - name: Build Core project
        run: dotnet build src/Core/Core.fsproj --configuration Release --no-restore

      - name: Restore Device Tests dependencies
        run: dotnet restore src/Tests/TestUtils/UI.DeviceTests/UI.DeviceTests.csproj

      - name: Build Device Tests (${{ matrix.target }})
        run: |
          dotnet build src/Tests/TestUtils/UI.DeviceTests/UI.DeviceTests.csproj \
            --framework ${{ matrix.target }} --configuration Release --no-restore

      - name: Upload build artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.platform }}
          path: |
            src/Tests/TestUtils/UI.DeviceTests/bin/Release/${{ matrix.target }}/
            **/*.binlog
          retention-days: 7

  # Test result aggregation
  device-tests-summary:
    name: Device Tests Summary
    needs: [core-tests, build-integration, device-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Core Tests: ${{ needs.core-tests.result }}"
          echo "Build Integration: ${{ needs.build-integration.result }}"
          echo "Device Tests: ${{ needs.device-tests.result }}"

          if [[ "${{ needs.core-tests.result }}" == "failure" ]]; then
            echo "❌ Core tests failed - critical business logic issues"
            exit 1
          fi

          if [[ "${{ needs.build-integration.result }}" == "failure" ]]; then
            echo "⚠️  Build integration tests failed - CI/CD setup issues detected"
            # Don't fail the build, just warn
          fi

          if [[ "${{ needs.device-tests.result }}" == "failure" ]]; then
            echo "⚠️  Some device builds failed - check platform-specific issues"
            # Don't fail the build for device test build issues
          fi

          echo "✅ Device Tests workflow completed"