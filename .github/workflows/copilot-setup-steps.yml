name: "Copilot Setup Steps"

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Disable Copilot agent firewall
        run: |
          # Skip firewall config in GitHub Actions environment
          echo "Skipping firewall configuration in CI environment"
        continue-on-error: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install MAUI workloads
        run: |
          dotnet workload install maui-android
          echo "? MAUI Android workload installed"

      - name: Verify NuGet configuration
        run: |
          echo "🔍 Verifying NuGet sources and configuration..."
          dotnet nuget list source
          
          echo "🔍 Checking critical package availability..."
          # Verify that key packages are accessible without actually installing
          echo "  Checking Appium.WebDriver 8.0.0..."
          nuget list Appium.WebDriver -Source https://api.nuget.org/v3/index.json | grep "8.0.0" || echo "  ⚠️ Appium.WebDriver 8.0.0 verification inconclusive"
        continue-on-error: true

      - name: Restore NuGet packages with enhanced diagnostics
        run: |
          echo "🔍 Starting NuGet restore with platform-aware handling..."
          
          # Show current environment info for diagnostics
          echo "📋 Environment Information:"
          echo "  OS: $(uname -s)"
          echo "  Platform: ${{ runner.os }}"
          echo "  Available workloads: $(dotnet workload list --machine-readable || echo 'none')"
          
          # Clear NuGet cache to ensure clean state
          echo "🧹 Clearing NuGet caches..."
          dotnet nuget locals all --clear
          
          echo "📦 Attempting NuGet restore with retry logic..."
          
          # Function to attempt restore with proper error handling
          attempt_restore() {
            local attempt=$1
            echo "🔄 Restore attempt $attempt of 3..."
            
            if dotnet restore --verbosity minimal --disable-parallel 2>&1; then
              echo "✅ Restore successful on attempt $attempt"
              return 0
            else
              echo "❌ Restore failed on attempt $attempt"
              return 1
            fi
          }
          
          # Try restore up to 3 times with increasing delays
          if attempt_restore 1; then
            echo "📦 NuGet packages restored successfully"
          elif { sleep 10; attempt_restore 2; }; then
            echo "📦 NuGet packages restored successfully (retry)"  
          elif { sleep 20; attempt_restore 3; }; then
            echo "📦 NuGet packages restored successfully (final retry)"
          else
            echo "⚠️ NuGet restore failed after 3 attempts"
            echo "🔍 This may be due to platform-specific workload dependencies (iOS/macOS workloads on Linux)"
            echo "📋 Diagnostic Information:"
            dotnet --info
            echo "🎯 Attempting platform-specific restore for available frameworks..."
            
            # Try to restore individual projects that should work on Linux
            echo "🔧 Restoring F# Core project..."
            dotnet restore src/Core/Core.fsproj --verbosity minimal || echo "❌ Core restore failed"
            
            echo "🔧 Restoring F# Core.Tests project..."
            dotnet restore src/Tests/Core.Tests/Core.Tests.fsproj --verbosity minimal || echo "❌ Core.Tests restore failed"
            
            echo "🔧 Restoring Android-compatible projects..."
            dotnet restore src/UI/Binnaculum.csproj -f net9.0-android --verbosity minimal || echo "❌ UI Android restore failed"
            
            echo "⚠️ Some packages may not be available due to platform limitations - this is expected on Linux runners"
            echo "✅ Workflow will continue with available packages"
          fi
        timeout-minutes: 10

      - name: Build F# Core project
        run: |
          dotnet build src/Core/Core.fsproj --no-restore
          echo "? F# Core project built successfully"

      - name: Build F# Core.Tests
        run: |
          dotnet build src/Tests/Core.Tests/Core.Tests.fsproj --no-restore
          echo "? F# Core.Tests built successfully"

      - name: Build TestUtils DeviceTests for Android
        run: |
          dotnet build src/Tests/TestUtils/UI.DeviceTests/UI.DeviceTests.csproj -f net9.0-android --no-restore
          echo "? TestUtils DeviceTests (Android) built successfully"

      - name: Verify test execution
        run: |
          dotnet test src/Tests/Core.Tests/Core.Tests.fsproj --no-build --verbosity minimal
          echo "? Core tests verified (expect 80/87 to pass - 7 MAUI-dependent tests fail in headless environment)"

      - name: Display environment info
        run: |
          echo "🎯 Build environment ready for Binnaculum development"
          echo "📱 Platforms available: Android (iOS/MacCatalyst require macOS)"
          echo "🧪 TestUtils infrastructure: Ready for device testing"
          echo "💰 Investment tracking: F# core + C# MAUI UI"

      - name: Collect diagnostic information on failure
        if: failure()
        run: |
          echo "🔍 Collecting diagnostic information after workflow failure..."
          
          echo "=== .NET SDK Information ==="
          dotnet --info
          
          echo "=== NuGet Sources ==="
          dotnet nuget list source
          
          echo "=== Workload Information ==="
          dotnet workload list --machine-readable || echo "No workloads installed"
          
          echo "=== Environment Variables ==="
          env | grep -E "(NUGET|DOTNET)" || echo "No relevant environment variables found"
          
          echo "=== Directory.Packages.props ==="
          head -20 Directory.Packages.props || echo "Directory.Packages.props not found"
          
          echo "=== Available Disk Space ==="
          df -h || echo "Cannot determine disk space"
          
          echo "=== Recent NuGet Cache ==="
          find ~/.nuget -name "*.nupkg" 2>/dev/null | head -10 || echo "No NuGet cache files found"